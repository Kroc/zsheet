; ZSheet (c) copyright Kroc Camen 2022. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
.DEF    NUL             0
.DEF    LO              0
.DEF    HI              1

; import machine-specific headers:
;-------------------------------------------------------------------------------
.IFDEF  SYSTEM_CBM
        .INC    "sys/cbm/cbm.wla"
.ENDIF
.IFDEF  CPU_65XX
        ; macros for 6502-based systems (6502, 6510, 65C02)
        ; to polyfill differences in instruction sets
        .INC    "sys/cpu_65xx.wla"
.ENDIF

.DEF    ZS_COLS_MAX          256
.DEF    ZS_COL_WIDTH_MIN     2
.DEF    ZS_COL_WIDTH_MAX     32
.DEF    ZS_ROWS_MAX          999

.INC    "print.wla"             ; screen output

.INC    "rc.wla"                ; Row-Column structure handling
.INC    "draw.wla"              ; drawing to the screen

.RAMSECTION "ZP_CURSOR" SLOT "ZP"       RETURNORG
        ;-----------------------------------------------------------------------
        ; current scroll offset of the spreadsheet view
        zp_view         INSTANCEOF Rc
        ; current cursor position
        ; TODO: to support selection ranges, and even disparate selections;
        ; (e.g. "A3,C6,B9") this will have to be a lot more complex
        zp_cursor       INSTANCEOF Rc
.ENDS


zsheet_init:
;===============================================================================
        lda # VIC_BLUE
        sta VIC_BORDER
        sta VIC_BACKGROUND

        jsr print_this
            .BYTE   PET_CYAN, PET_CASE_LO, PET_CLEAR
            .BYTE   NUL

.IFDEF  SYSTEM_C64
        ;///////////////////////////////////////////////////////////////////////
        ; prepare KERNAL for loading
        ;
        ldx ZP_KERNAL_DEV       ; last-used KERNAL device number
        bne +                   ; not 0? good
        ldx # DEV_DRV8          ; default to drive 8
+       ldy # $00               ; use fixed load address
        tya                     ; logical file number
        jsr KERNAL_SETLFS

        ldx #< @filename
        ldy #> @filename
        lda # 4                 ; A is string-length
        jsr KERNAL_SETNAM       ; set KERNAL file name

        lda # $00               ; load, not verify
        ldx #< $c000
        ldy #> $c000
        jsr KERNAL_LOAD

        bcc +

        ; disk error!
-       inc VIC_BORDER
        jmp -

.ENDIF  ;///////////////////////////////////////////////////////////////////////

+       lda # 0

        sta zp_view.col
        sta zp_view.row+LO
        sta zp_view.row+HI

        sta zp_cursor.col
        sta zp_cursor.row+LO
        sta zp_cursor.row+HI

        ; make sure the bitmask for printing is clear!
        ; (this is used to do reverse-video printing)
        sta zp_print_mask

        jsr draw_screen

-       jsr input
        jmp -

@filename:
        ;-----------------------------------------------------------------------
        .ASC    "font", 0

input:
;===============================================================================
        ; read keyboard:
-       jsr KERNAL_GETIN_ADDR
        beq -

@down   cmp # PET_CRSR_DN
        ;-----------------------------------------------------------------------
        bne @up

        lda zp_view.row+LO
        cmp # $100-21 ; (height of view)
        beq @rts
        inc zp_view.row+LO
        jmp draw_screen

@up     cmp # PET_CRSR_UP
        ;-----------------------------------------------------------------------
        bne @right

        ; if at row zero, cannot scroll up!
        lda zp_view.row+LO
        bne +
        rts

+       dec zp_view.row+LO
        jmp draw_screen

@right  cmp # PET_CRSR_RT
        ;-----------------------------------------------------------------------
        bne @left
        
        ldx zp_view.col
        inx
        bne +
        rts
        
+       stx zp_view.col
        jmp draw_screen

@left   cmp # PET_CRSR_LT
        ;-----------------------------------------------------------------------
        bne @rts
        
        ; if at column zero, cannot scroll left!
        lda zp_view.col
        bne +
        rts

+       dec zp_view.col
        jmp draw_screen

@rts    rts