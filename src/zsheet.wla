; ZSheet (c) copyright Kroc Camen 2022. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; import machine-specific headers:
;-------------------------------------------------------------------------------
.IFDEF  SYSTEM_C64
        .INC    "sys/c64.wla"
.ENDIF


.RAMSECTION "ZP_REG"            SLOT "ZP" RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        ; temporary locations for backing up registers;
        ; cannot be nested, so should only be used within
        ; routines that do not call any other routines
        zp_a            BYTE
        zp_x            BYTE
        zp_y            BYTE
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS

;===============================================================================
.DEF    ZS_COLS_MAX             256
.DEF    ZS_COL_WIDTH_MIN        2
.DEF    ZS_COL_WIDTH_MAX        32
.DEF    ZS_COL_WIDTH_DEFAULT    5
.DEF    ZS_ROWS_MAX             999


.SLOT   "CODE"
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

init:
        jmp zsheet_init

.INC    "print.wla"             ; screen output

.INC    "sheet.wla"             ; sheet memory allocation

.INC    "rc.wla"                ; Row-Column structure handling
.INC    "view.wla"              ; viewport handling
.INC    "draw.wla"              ; drawing to the screen


zsheet_init:
;===============================================================================
        ldx # $ff               ; throw away the current return stack,
        txs                     ; we won't be returning to BASIC

        lda # VIC_BLUE
        sta VIC_BORDER
        sta VIC_BACKGROUND
        
        lda # PET_CYAN
        sta zp_print_colour
        
        lda # %00000000         ; make sure the bitmask for printing is clear!
        sta zp_print_mask       ; (this is used to do reverse-video printing)
        jsr clear_buffer        ; clear print buffer used for cell clipping

        ; change the VIC memory layout to position the text-screen & font
        lda # ((>zs_screen & %00111100) << 2) | ((>zs_font & %00111000) >> 2)
        sta VIC_LAYOUT

        jsr init_sheet          ; initialise a blank sheet
        jsr init_view           ; initialise default View

        ; with everything configured, do a full screen redraw:
        ; we don't need to erase the screen beforehand as this routine
        ; will overwrite every cell on the screen in due course
        jsr draw_screen

        ; fallthrough
        ; ...

main:
;===============================================================================
-       jsr input
        jmp -

input:
;===============================================================================
        ; read keyboard:
-       jsr KERNAL_GETIN_ADDR
        beq -

@down:  cmp # PET_CRSR_DN
        ;-----------------------------------------------------------------------
        bne @up

        jmp cursor_down

@up:    cmp # PET_CRSR_UP
        ;-----------------------------------------------------------------------
        bne @right

        jmp cursor_up

@right: cmp # PET_CRSR_RT
        ;-----------------------------------------------------------------------
        bne @left
        
        jmp cursor_right

@left:  cmp # PET_CRSR_LT
        ;-----------------------------------------------------------------------
        bne @rts
        
        jmp cursor_left

@rts:   rts