; ZSheet (c) copyright Kroc Camen 2022. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
.DEF    NUL             0
.DEF    LO              0
.DEF    HI              1

; import machine-specific headers:
;-------------------------------------------------------------------------------
.IFDEF  SYSTEM_C64
        .INC    "sys/c64.wla"
.ENDIF

; ZShell memory map:
;===============================================================================
;
;  $0   $1000                                        $C000     $E000  $FFFF
;  +--+-+--------------------------------------------+----+----+--------+
;  |  | | SHEET DATA                                 | C1 | C2 | C3     |
;  +--+-+--------------------------------------------+----+----+--------+
;     $0800 < font                                        $D000
;
;  C1 = code, drawing
;  C2 = code, cannot use I/O
;  C3 = code, cannot use KERNAL
;
.DEF    zs_screen       $0400   ; screen-RAM
.DEF    zs_font         $0800   ; custom font
.DEF    zs_data         $1000   ; user-space starting address
.DEF    zs_code         $c000   ; main code

; active device number (system-dependent);
; this is the same ZP byte used by the KERNAL
; to store the last-used device number
;
.DEF    zs_device       ZP_KERNAL_DEV                               ;=$BA

; when printing, we can easily flip between printing to the screen
; and setting colour RAM by incrementing the hi-byte of `zp_screen`
.DEF    COLOUR_OFFSET   $d8 - >zs_screen

;===============================================================================
.DEF    ZS_COLS_MAX          256
.DEF    ZS_COL_WIDTH_MIN     2
.DEF    ZS_COL_WIDTH_MAX     32
.DEF    ZS_ROWS_MAX          999

; begin code:
;===============================================================================
.SLOT "HIRAM"

init:
        jmp zsheet_init

.INC    "print.wla"             ; screen output

.INC    "rc.wla"                ; Row-Column structure handling
.INC    "draw.wla"              ; drawing to the screen


zsheet_init:
;===============================================================================
        ldx # $ff               ; throw away the current return stack,
        txs                     ; we won't be returning to BASIC

        lda # VIC_BLUE
        sta VIC_BORDER
        sta VIC_BACKGROUND
        lda # PET_CYAN
        sta zp_print_colour

        ; change the VIC memory layout to position the text-screen & font
        lda # ((>zs_screen & %00111100) << 2) | ((>zs_font & %00111000) >> 2)
        sta VIC_LAYOUT

        ; make sure the bitmask for printing is clear!
        ; (this is used to do reverse-video printing)
        sta zp_screen_mask

        lda # 0
        sta zp_view.col
        sta zp_view.row+LO
        sta zp_view.row+HI

        sta zp_view.cursor.col
        sta zp_view.cursor.row+LO
        sta zp_view.cursor.row+HI

        ; clear the "work RAM", temporary variables
        ; used that are not part of the sheet data
        ldx #< (SECTIONEND_ZS_WORK - SECTIONSTART_ZS_WORK)
-       dex
        sta.w SECTIONSTART_ZS_WORK, x
        bne -

        ; set the position/size
        ; of the default view:
        ;
        lda # 2                 ; sheet starts on the second screen row
        sta zp_view.y
        ; number of screen-rows in the view:
        ; height of the screen sans two for the table tabs,
        ; row columns and another two for the status & formula bar
        lda # SYS_SCREEN_ROWS - 2 - 2
        sta zp_view.h

        ; with everything configured, do a full screen redraw:
        ; we don't need to erase the screen beforehand as this routine
        ; will overwrite every cell on the screen in due course
        jsr draw_screen


main:
;===============================================================================
-       jsr input
        jmp -


input:
;===============================================================================
        ; read keyboard:
-       jsr KERNAL_GETIN_ADDR
        beq -

@down:  cmp # PET_CRSR_DN
        ;-----------------------------------------------------------------------
        bne @up

        ; when scrolling down we need to stop scrolling when the last row
        ; hits the *bottom* of the view, accounting for the view height
        ;
        ; since the bottom of the sheet is row 255 (0-based), subtract the
        ; height of the view to work out the row number at the top of the
        ; view that causes row 255 to appear at the bottom of the view
        ;
        sec                     ; clear borrow for subtraction
        lda # $ff               ; prepare for 255-H
        sbc zp_view.h           ; subtract the view height
        sta.w @dnrow+1          ; write this into our compare
        inc.w @dnrow+1          ; compensate to make $100-H

        lda zp_view.row+LO
@dnrow  cmp # $ff
        bcs @rts

        ; do the hard scroll, copying the screen rows up to make room
        ; at the bottom of the screen. this routine intentionally leaves
        ; `zp_print` on the last row, ready to be filled in
        jsr scroll_view_down
        
        clc
        lda zp_view.row+LO
        inc zp_view.row+LO
        adc zp_view.h
        sta zp_drawrc.row+LO
        jmp draw_row
        rts

@up:    cmp # PET_CRSR_UP
        ;-----------------------------------------------------------------------
        bne @right

        ; if at row zero, cannot scroll up!
        lda zp_view.row+LO
        beq @rts

        dec zp_view.row+LO
        ;;ldx zp_view.h           ; number of rows to copy upwards
        jsr scroll_view_up
        
        lda zp_view.row+LO
        sta zp_drawrc.row+LO
        jmp draw_row

@right: cmp # PET_CRSR_RT
        ;-----------------------------------------------------------------------
        bne @left
        
        ldx zp_view.col
        inx
        beq @rts
        
        stx zp_view.col
        jmp draw_screen

@left:  cmp # PET_CRSR_LT
        ;-----------------------------------------------------------------------
        bne @rts
        
        ; if at column zero, cannot scroll left!
        lda zp_view.col
        beq @rts

        dec zp_view.col
        jmp draw_screen

@rts:   rts
