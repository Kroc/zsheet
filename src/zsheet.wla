; ZSheet (c) copyright Kroc Camen 2022. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
.DEF    NUL             0
.DEF    LO              0
.DEF    HI              1

; import machine-specific headers:
;-------------------------------------------------------------------------------
.IFDEF  SYSTEM_C64
        .INC    "sys/c64.wla"
.ENDIF

; ZShell memory map:
;===============================================================================
;
;  $0   $1000                                        $C000            $FFFF
;  +--+-+--------------------------------------------+----------------+
;  |  | | SHEET DATA                                 | CODE           |
;  +--+-+--------------------------------------------+----------------+
;     $0800 < font
;
.DEF    zs_screen       $0400   ; screen-RAM
.DEF    zs_font         $0800   ; custom font
.DEF    zs_data         $1000   ; user-space starting address
.DEF    zs_code         $c000   ; main code

; active device number (system-dependent);
; this is the same ZP byte used by the KERNAL
; to store the last-used device number
;
.DEF    zs_device       ZP_KERNAL_DEV                               ;=$BA

; when printing, we can easily flip between printing to the screen
; and setting colour RAM by incrementing the hi-byte of `zp_screen`
.DEF    COLOUR_OFFSET   $d8 - >zs_screen

;===============================================================================
.DEF    ZS_COLS_MAX          256
.DEF    ZS_COL_WIDTH_MIN     2
.DEF    ZS_COL_WIDTH_MAX     32
.DEF    ZS_ROWS_MAX          999

; begin code:
;===============================================================================
.SLOT "HIRAM"

init:
        jmp zsheet_init

.INC    "print.wla"             ; screen output

.INC    "rc.wla"                ; Row-Column structure handling
.INC    "draw.wla"              ; drawing to the screen


.RAMSECTION "ZP_CURSOR" SLOT "ZP"       RETURNORG
        ;-----------------------------------------------------------------------
        ; current scroll offset of the spreadsheet view
        zp_view         INSTANCEOF Rc
        ; current cursor position
        ; TODO: to support selection ranges, and even disparate selections;
        ; (e.g. "A3,C6,B9") this will have to be a lot more complex
        zp_cursor       INSTANCEOF Rc
.ENDS


zsheet_init:
;===============================================================================
        ldx # $ff               ; throw away the current return stack,
        txs                     ; we won't be returning to BASIC

        lda # VIC_BLUE
        sta VIC_BORDER
        sta VIC_BACKGROUND
        lda # PET_CYAN
        sta zp_print_colour

        ; change the VIC memory layout to position the text-screen & font
        lda # ((>zs_screen & %00111100) << 2) | ((>zs_font & %00111000) >> 2)
        sta VIC_LAYOUT

        jsr print_this
            .BYTE   PET_CYAN, PET_CASE_LO, PET_CLEAR
            .BYTE   NUL

        lda # 0
        sta zp_view.col
        sta zp_view.row+LO
        sta zp_view.row+HI

        sta zp_cursor.col
        sta zp_cursor.row+LO
        sta zp_cursor.row+HI

        ; clear the "work RAM", temporary variables
        ; used that are not part of the sheet data
        ldx #< (SECTIONEND_ZS_WORK - SECTIONSTART_ZS_WORK)
-       dex
        sta.w SECTIONSTART_ZS_WORK, x
        bne -

        ; make sure the bitmask for printing is clear!
        ; (this is used to do reverse-video printing)
        sta zp_screen_mask

        jsr draw_screen


main:
;===============================================================================
-       jsr input
        jmp -


input:
;===============================================================================
        ; read keyboard:
-       jsr KERNAL_GETIN_ADDR
        beq -

@down   cmp # PET_CRSR_DN
        ;-----------------------------------------------------------------------
        bne @up

        lda zp_view.row+LO
        cmp # $100-21 ; (height of view)
        beq @rts
        inc zp_view.row+LO
        jmp draw_screen

@up     cmp # PET_CRSR_UP
        ;-----------------------------------------------------------------------
        bne @right

        ; if at row zero, cannot scroll up!
        lda zp_view.row+LO
        bne +
        rts

+       dec zp_view.row+LO
        jmp draw_screen

@right  cmp # PET_CRSR_RT
        ;-----------------------------------------------------------------------
        bne @left
        
        ldx zp_view.col
        inx
        bne +
        rts
        
+       stx zp_view.col
        jmp draw_screen

@left   cmp # PET_CRSR_LT
        ;-----------------------------------------------------------------------
        bne @rts
        
        ; if at column zero, cannot scroll left!
        lda zp_view.col
        bne +
        rts

+       dec zp_view.col
        jmp draw_screen

@rts    rts
