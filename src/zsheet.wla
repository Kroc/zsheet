; ZSheet (c) copyright Kroc Camen 2022. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
.DEF    NUL             0
.DEF    LO              0
.DEF    HI              1

; import machine-specific headers:
;-------------------------------------------------------------------------------
.IFDEF  SYSTEM_C64
        .INC    "sys/c64.wla"
.ENDIF

; ZShell memory map:
;===============================================================================
;
;  $0   $1000                                        $C000     $E000  $FFFF
;  +--+-+--------------------------------------------+----+----+--------+
;  |  | | SHEET DATA                                 | C1 | C2 | C3     |
;  +--+-+--------------------------------------------+----+----+--------+
;     $0800 < font                                        $D000
;
; $0400 screen
; $0800 custom font
; $1000 start of sheet data
; $C000 C1: code
; $D000 C2: code, cannot use I/O
; $E000 C3: code, cannot use KERNAL
;
.DEF    zs_screen       $0400   ; screen-RAM
.DEF    zs_font         $0800   ; custom font
.DEF    zs_data         $1000   ; user-space starting address
.DEF    zs_code         $c000   ; main code

; active device number (system-dependent);
; this is the same ZP byte used by the KERNAL
; to store the last-used device number
;
.DEF    zs_device       ZP_KERNAL_DEV                                   ;=$BA

; when printing, we can easily flip between printing to the screen
; and setting colour RAM by incrementing the hi-byte of `zp_screen`
.DEF    COLOUR_OFFSET   $d8 - >zs_screen

;===============================================================================
.DEF    ZS_COLS_MAX          256
.DEF    ZS_COL_WIDTH_MIN     2
.DEF    ZS_COL_WIDTH_MAX     32
.DEF    ZS_ROWS_MAX          999

; begin code:
;===============================================================================
.SLOT "HIRAM"

init:
        jmp zsheet_init

.INC    "print.wla"             ; screen output

.INC    "rc.wla"                ; Row-Column structure handling
.INC    "view.wla"              ; viewport handling
.INC    "draw.wla"              ; drawing to the screen


zsheet_init:
;===============================================================================
        ldx # $ff               ; throw away the current return stack,
        txs                     ; we won't be returning to BASIC

        lda # VIC_BLUE
        sta VIC_BORDER
        sta VIC_BACKGROUND
        lda # PET_CYAN
        sta zp_print_colour

        ; change the VIC memory layout to position the text-screen & font
        lda # ((>zs_screen & %00111100) << 2) | ((>zs_font & %00111000) >> 2)
        sta VIC_LAYOUT

        ; make sure the bitmask for printing is clear!
        ; (this is used to do reverse-video printing)
        sta zp_print_mask

        lda # 0
        sta zp_view.col
        sta zp_view.row+LO
        sta zp_view.row+HI

        ; set starting position of the cell cursor
        sta zp_view.cursor.col
        sta zp_view.cursor.row+LO
        sta zp_view.cursor.row+HI
        sta zp_col_sel
        sta zp_row_sel

        ; clear the "work RAM", temporary variables
        ; used that are not part of the sheet data
        ldx #< (SECTIONEND_ZS_WORK - SECTIONSTART_ZS_WORK)
-       dex
        sta.w SECTIONSTART_ZS_WORK, x
        bne -

        ; set the position/size
        ; of the default view:
        ;
        lda # 1                 ; sheet starts on the second screen row
        sta zp_view.y
        ; number of screen-rows in the view:
        ; height of the screen sans 1 for the table tabs
        ; and another 2 for the status & formula bar
        lda # SYS_SCREEN_ROWS - 2 - 2
        sta zp_view.h

        ; with everything configured, do a full screen redraw:
        ; we don't need to erase the screen beforehand as this routine
        ; will overwrite every cell on the screen in due course
        jsr draw_screen


main:
;===============================================================================
-       jsr input
        jmp -


input:
;===============================================================================
        ; read keyboard:
-       jsr KERNAL_GETIN_ADDR
        beq -

@down:  cmp # PET_CRSR_DN
        ;-----------------------------------------------------------------------
        bne @up

        jmp cursor_down

@up:    cmp # PET_CRSR_UP
        ;-----------------------------------------------------------------------
        bne @right

        jmp cursor_up

@right: cmp # PET_CRSR_RT
        ;-----------------------------------------------------------------------
        bne @left
        
        ldx zp_view.col
        inx
        beq @rts
        
        stx zp_view.col
        jmp draw_screen

@left:  cmp # PET_CRSR_LT
        ;-----------------------------------------------------------------------
        bne @rts
        
        ; if at column zero, cannot scroll left!
        lda zp_view.col
        beq @rts

        dec zp_view.col
        jmp draw_screen

@rts:   rts
