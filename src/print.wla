; ZSheet (c) copyright Kroc Camen 2022. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; print.wla : screen output
;

.RAMSECTION "ZP_TEMP"   SLOT "ZP"       RETURNORG
        ;-----------------------------------------------------------------------
        ; a temporary value available for conversions
        zp_temp         .WORD
        zp_temp1         DB
        zp_temp2         DB
        ; output value
        zp_word         WORD
.ENDS

.RAMSECTION "ZP_BUFFER" SLOT "ZP" RETURNORG
;///////////////////////////////////////////////////////////////////////////////
        ; in order to clip cell contents against column widths and screen edges
        ; a buffer is used to prepare cell contents before copying to screen
        ; (it would be laborious to check clipping for every char printed)
        zp_buffer       DSB ZS_COL_WIDTH_MAX
        ; this is the current cursor position within the print buffer
        zp_index        BYTE
;///////////////////////////////////////////////////////////////////////////////
.ENDS


clear_buffer:
;===============================================================================
; clears the print buffer:
;-------------------------------------------------------------------------------
        lda # 0
.REPEAT ZS_COL_WIDTH_MAX INDEX I
        sta zp_buffer+I
.ENDR   sta zp_index
        rts


print_buffer:
;===============================================================================
; prints the buffer to the screen:
;
; ensure the screen position has already been set via `set_scr_addr`.
; printing will automatically clip against the screen edge
;
; in:   X       max number of characters to print
;       Y       offset from `zp_screen`, i.e. screen X-position
;
; out:  A       (clobbered)
;       Y       the screen offset is moved forward
;               by the number of printed chars
;-------------------------------------------------------------------------------
        ; calculate how many chars will fit
        ; TODO
        rts


print_colnum: ;(not a typo! :P)
;===============================================================================
; print a column's number as alpha, i.e. A-IV:
;
; in:   A       column index, 0-255
;-------------------------------------------------------------------------------
        jsr col_index_to_alpha  ; convert column number to letter(s)
        cpx # $40               ; is there an upper-letter?
        beq +                   ; if not, skip over printing upper-letter

        pha                     ; put aside lower-letter
        txa                     ; get upper-letter
        ora zp_print_mask       ; apply case or reverse-video, if set
        sta [zp_screen], y      ; print upper-letter
        iny                     ; move to next character on screen
        pla                     ; retrieve lower-letter

        cpy # SYS_SCREEN_COLS   ; have we reached the edge of the screen?
        beq @rts                ; if yes, clip and skip

+       ora zp_print_mask       ; apply case or reverse-video, if set
        sta [zp_screen], y      ; print lower-letter
        iny                     ; move to next character on screen
@rts:   rts


print_char:
;===============================================================================
; print a character to the current screen position:
;
; in:   A       screen-code to print, where `zp_screen` is
;               the address of the current screen row
;       Y       offset from `zp_screen`, i.e. screen X-position
;
; out:  Y       Y is incremented by 1
;       A, X    (preserved)                                             ;+6=6
;-------------------------------------------------------------------------------
        ora zp_print_mask                                               ;+3=9
        sta [zp_screen], y                                              ;+6=15
        iny                                                             ;+2=17
        rts                                                             ;+6=23


print_char_colour:
;===============================================================================
; print a character to the current screen position and set its colour:
;
; in:   A       screen-code to print, where `zp_screen` is the address of the
;               current screen row. colour will be taken from `zp_print_colour`
;       Y       offset from `zp_screen`, i.e. screen X-position
;
; out:  Y       Y is incremented by 1
;       A, X    (preserved)                                             ;+6=6
;-------------------------------------------------------------------------------
        ora zp_print_mask       ; apply reverse video, if set           ;+3=9
        sta [zp_screen], y      ; write the screen code                 ;+6=15
        lda zp_print_colour                                             ;+3=18
        sta [zp_colour], y                                              ;+6=24
        iny                                                             ;+2=26
        rts                                                             ;+6=32


print_number_word:
;===============================================================================
; print a 16-bit binary number as decimal:
;
; adapted from:
; <http://forum.6502.org/viewtopic.php?p=55800#p55800>
;
; in:   A       lo-byte of number
;       X       hi-byte of number
;
; TODO: we may want to adpat this to 'pop' one digit at a time
;       so that we can clip against the screen edge
;-------------------------------------------------------------------------------
        sta zp_word+LO
        stx zp_word+HI

@print: lda # 0                 ; null delimiter for print
        pha

        ; divide value by 10:
@div10: lda # 0
        sta zp_temp2            ; clr BCD
        ldx # 16                ; loop counter (process 16 bits)

@loop:  asl zp_word+LO          ; value is gradually replaced
        rol zp_word+HI          ; with the quotient
        rol zp_temp2            ; BCD result is gradually replaced
        lda zp_temp2            ; with the remainder
        sec
        sbc # 10                ; partial BCD >= 10 ?
        bcc +
        sta zp_temp2            ; yes: update the partial result
        inc zp_word+LO          ; set low bit in partial quotient

+       dex
        bne @loop               ; loop 16 times
        
        lda zp_temp2
        ora # '0'               ; convert BCD result to ASCII
        pha                     ; stack digits in ascending order
        
        lda zp_word+LO
        ora zp_word+HI
        bne @div10              ; } until value is 0
        
        pla
-       ora zp_print_mask       ; apply reverse-video, if enabled
        sta [zp_screen], y
        iny
        pla
        bne -

        rts


print_number_byte:
;===============================================================================
; print a single byte value as a space-padded decimal:
; (3 characters are always printed)
;
; this routine for converting a byte to decimal digits is adapted from:
; <https://codebase64.org/doku.php?id=base:tiny_.a_to_ascii_routine>,
; Kroc added the space-padding
;
; in:   A       binary number 0-255 to print in decimal
;       Y       offset from `zp_screen` to print at
; out:  Y       the screen offset is moved forward
;               by the number of printed chars
;       X       (preserved)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        stx.w @ldx+1            ; preserve X

        ; hundreds:
        ;-----------------------------------------------------------------------
        sec
        ldx # '0'-1             ; increment using a screen-code digit!
-       inx                     ; increment hundreds-digit,
        sbc # 100               ; for each 100 decimal subtracted
        bcs -                   ; keep going?
        pha                     ; (put aside the remainder)

        ; we compare with "1" instead of "0" so that carry is clear for "0"
        ; and set for "1"-"9". we slide this into the flag byte to indicate
        ; later whether the middle digit should be a space or a number
        ;
        txa                     ; get hundreds-digit:
        cmp # '1'               ; is it a zero?
        bcs +
        lda # ' '               ; no hundreds digit: use a space instead
+       ora zp_print_mask       ; apply reverse-video mode, if enabled
        sta [zp_screen], y      ; print the digit
        iny                     ; move to the next screen col

        ror.w @flag             ; (store carry in bit 7 and clear carry!)
        pla                     ; retrieve the working remainder

        ; tens:
        ;-----------------------------------------------------------------------
        ldx # '9'+1             ; decrement using an ASCII digit!
-       dex                     ; decrement the tens-digit,
        adc # 10                ; for each 10 decimal subtracted
        bmi -                   ; keep going?

        adc # '0'-1             ; make it an ASCII numeral
        pha                     ; (put aside the remainder!)

        txa                     ; get tens-digit:
        rol.w @flag             ; retrieve flag to indicate padding or not
        bcs +                   ; carry set means there was a hundreds digit
                                ; so we should print a literal "0"
        cmp # '0'               ; is the digit a zero?
        bne +                   ; if not, no padding needed,
        lda # ' '               ; otherwise use padding instead
+       ora zp_print_mask       ; apply reverse-video, if enabled
        sta [zp_screen], y      ; print the digit
        iny                     ; move to the next screen col

        ; ones:
        ;-----------------------------------------------------------------------
        pla                     ; retrieve the 1s-digit
        ora zp_print_mask       ; apply reverse-video, if enabled
        sta [zp_screen], y      ; print the digit
        iny                     ; move to the next screen col

@ldx    ldx # $00               ; restore X
        rts

@flag:  .BYTE %00000000


fast_spaces_colour:
;===============================================================================
; print up to 40 spaces, quickly, with colour set
;
; in:   A       colour code
;       X       number of spaces to print
;       Y       current offset from `zp_screen`/`zp_colour` to start at
;
; out:  Y       Y is returned incremented by X;
;               i.e. ready to write next value
;       X       (preserved)
;       carry   (preserved)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        sty.w @ldy+1            ; preserve Y

        ; do the colouring first since A specifies the colour code
        jsr fast_colour

        ; restore Y to go back to the start position and draw the spaces
@ldy    ldy # 0

        ; fallthrough
        ; ...

fast_spaces:                                                            ;+6=6
;===============================================================================
; print up to 40 spaces, quickly:
;
; in:   X       number of spaces to print
;       Y       current offset from `zp_screen` to start at
;
; out:  Y       Y is returned incremented by X;
;               i.e. ready to write next value
;       X       (preserved)
;       carry   (preserved)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        lda.w spaces_table, x   ; look up lo-byte of address to jump to ;+4=10
        sta.w @jmp+1            ; change jump address to match          ;+4=14
        
        lda # ' '               ; use a space character                 ;+2=16
        ora zp_print_mask       ; apply reverse-video, if set (bit 7)   ;+3=19
@jmp    jmp spaces_chars                                                ;+3=22


fast_spaces_A:                                                          ;+6=6
;===============================================================================
; print up to 40 spaces, quickly:
; (this version does not use the X register)
;
; in:   A       number of spaces to print
;       Y       current offset from `zp_screen` to start at
;               i.e. the screen column to print from
;
; out:  Y       Y is returned incremented by A;
;               i.e. ready to write next value
;       X       (preserved)
;       carry   (preserved)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        sta.w @lo+1             ; use the char count as the table entry ;+4=10
@lo     lda.w spaces_table      ; read back the offset in the routine   ;+4=14
        sta.w @jmp+1            ; modify the jump                       ;+4=18

        lda # ' '               ; use a space character                 ;+2=20
        ora zp_print_mask       ; apply reverse-video, if set (bit 7)   ;+3=23
@jmp    jmp spaces_chars        ;                                       ;+3=26


fast_colour:                                                            ;+6=6
;===============================================================================
; colour up to 40 screen cells, quickly
;
; in:   A       colour code
;       X       number of cells to colour
;       Y       current offset from `zp_screen` to start at
;
; out:  Y       Y is returned incremented by X;
;               i.e. ready to write next value
;       X       (preserved)
;       carry   (preserved)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        pha                     ; put colour value aside                ;+3=

        lda.w colour_table, x   ; look up lo-byte of address to jump to ;+4=
        sta.w @jmp+1            ; change jump address to match          ;+4=
        
        pla                     ; restore colour value                  ;+3=
@jmp    jmp colour_chars                                                ;+3=


; NOTE: this section *must* be aligned to a 256-byte page!
;
.SECTION "fast_write"           ALIGN 256       RETURNORG
;###############################################################################
spaces_chars:
;===============================================================================
@chr40: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr39: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr38: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr37: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr36: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr35: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr34: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr33: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr32: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr31: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr30: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr29: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr28: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr27: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr26: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr25: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr24: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr23: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr22: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr21: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr20: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr19: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr18: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr17: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr16: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr15: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr14: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr13: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr12: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr11: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr10: sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr9:  sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr8:  sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr7:  sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr6:  sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr5:  sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr4:  sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr3:  sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr2:  sta [zp_screen], y                                              ;+6
        iny                                                             ;+2
@chr1:  sta [zp_screen], y                                              ;+6
        iny                                                             ;+2

@rts:   rts                                                             ;*+6

colour_chars:
;===============================================================================
@chr40: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr39: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr38: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr37: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr36: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr35: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr34: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr33: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr32: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr31: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr30: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr29: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr28: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr27: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr26: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr25: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr24: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr23: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr22: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr21: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr20: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr19: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr18: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr17: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr16: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr15: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr14: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr13: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr12: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr11: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr10: sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr9:  sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr8:  sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr7:  sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr6:  sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr5:  sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr4:  sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr3:  sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr2:  sta [zp_colour], y                                              ;+6
        iny                                                             ;+2
@chr1:  sta [zp_colour], y                                              ;+6
        iny                                                             ;+2

@rts:   rts                                                             ;+6

        ; skip enough bytes to reach the beginning of the next 256-byte page
        .DSB 14, $00

spaces_table:
;===============================================================================
        .BYTE   <spaces_chars@rts
        .BYTE   <spaces_chars@chr1,     <spaces_chars@chr2
        .BYTE   <spaces_chars@chr3,     <spaces_chars@chr4
        .BYTE   <spaces_chars@chr5,     <spaces_chars@chr6
        .BYTE   <spaces_chars@chr7,     <spaces_chars@chr8
        .BYTE   <spaces_chars@chr9,     <spaces_chars@chr10
        .BYTE   <spaces_chars@chr11,    <spaces_chars@chr12
        .BYTE   <spaces_chars@chr13,    <spaces_chars@chr14
        .BYTE   <spaces_chars@chr15,    <spaces_chars@chr16
        .BYTE   <spaces_chars@chr17,    <spaces_chars@chr18
        .BYTE   <spaces_chars@chr19,    <spaces_chars@chr20
        .BYTE   <spaces_chars@chr21,    <spaces_chars@chr22
        .BYTE   <spaces_chars@chr23,    <spaces_chars@chr24
        .BYTE   <spaces_chars@chr25,    <spaces_chars@chr26
        .BYTE   <spaces_chars@chr27,    <spaces_chars@chr28
        .BYTE   <spaces_chars@chr29,    <spaces_chars@chr30
        .BYTE   <spaces_chars@chr31,    <spaces_chars@chr32
        .BYTE   <spaces_chars@chr33,    <spaces_chars@chr34
        .BYTE   <spaces_chars@chr35,    <spaces_chars@chr36
        .BYTE   <spaces_chars@chr37,    <spaces_chars@chr38
        .BYTE   <spaces_chars@chr39,    <spaces_chars@chr40

colour_table:
;===============================================================================
        .BYTE   <colour_chars@rts
        .BYTE   <colour_chars@chr1,     <colour_chars@chr2
        .BYTE   <colour_chars@chr3,     <colour_chars@chr4
        .BYTE   <colour_chars@chr5,     <colour_chars@chr6
        .BYTE   <colour_chars@chr7,     <colour_chars@chr8
        .BYTE   <colour_chars@chr9,     <colour_chars@chr10
        .BYTE   <colour_chars@chr11,    <colour_chars@chr12
        .BYTE   <colour_chars@chr13,    <colour_chars@chr14
        .BYTE   <colour_chars@chr15,    <colour_chars@chr16
        .BYTE   <colour_chars@chr17,    <colour_chars@chr18
        .BYTE   <colour_chars@chr19,    <colour_chars@chr20
        .BYTE   <colour_chars@chr21,    <colour_chars@chr22
        .BYTE   <colour_chars@chr23,    <colour_chars@chr24
        .BYTE   <colour_chars@chr25,    <colour_chars@chr26
        .BYTE   <colour_chars@chr27,    <colour_chars@chr28
        .BYTE   <colour_chars@chr29,    <colour_chars@chr30
        .BYTE   <colour_chars@chr31,    <colour_chars@chr32
        .BYTE   <colour_chars@chr33,    <colour_chars@chr34
        .BYTE   <colour_chars@chr35,    <colour_chars@chr36
        .BYTE   <colour_chars@chr37,    <colour_chars@chr38
        .BYTE   <colour_chars@chr39,    <colour_chars@chr40
;###############################################################################
.ENDS