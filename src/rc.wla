; ZSheet (c) copyright Kroc Camen 2022. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; functions for working with "Rc" (row-col) cell references:

.STRUCT Rc
        row     WORD
        col     BYTE
.ENDST


col_index_to_alpha_x:
;===============================================================================
; convert a column number (0-255) to alpha ("A"..."IV")
;
; in:   X       column-number (0-255)
;
; out:  A       lower letter as a screen-code ($41-$5A)
;       X       upper letter as a screen-code ($41-$5A), $40 for none
;       Y       (preserved)
;-------------------------------------------------------------------------------
        txa

        ; fallthrough
        ; ...

col_index_to_alpha:
;===============================================================================
; convert a column number (0-255) to alpha ("A"..."IV")
;
; in:   A       column-number (0-255)
;
; out:  A       lower letter as a screen-code ($41-$5A)
;       X       upper letter as a screen-code ($41-$5A), $40 for none
;       Y       (preserved)
;-------------------------------------------------------------------------------
        ldx # $40               ; begin with columns "A"-"Z", no upper letter
        sec                     ; clear borrow for subtracting

.IFDEF  OPTIMIZE_SIZE
        ;///////////////////////////////////////////////////////////////////////
-       sbc # 26                ; reduce index by 26
        bcc +                   ; if borrow occured, look up lower "A"-"Z"
        inx                     ; increment upper letter,
        bne -                   ; and check again
.ELSE   ;///////////////////////////////////////////////////////////////////////
        sbc # 26                ; reduce index by 26
        bcc +                   ; if borrow occured, look up lower "A"-"Z"
        inx                     ; ("A" upper letter)
        sbc # 26                ; reduce index by 26
        bcc +                   ; if borrow occured, look up lower "A"-"Z"
        inx                     ; ("B" upper letter)
        sbc # 26                ; reduce index by 26
        bcc +                   ; if borrow occured, look up lower "A"-"Z"
        inx                     ; ("C" upper letter)
        sbc # 26                ; reduce index by 26
        bcc +                   ; if borrow occured, look up lower "A"-"Z"
        inx                     ; ("D" upper letter)
        sbc # 26                ; reduce index by 26
        bcc +                   ; if borrow occured, look up lower "A"-"Z"
        inx                     ; ("E" upper letter)
        sbc # 26                ; reduce index by 26
        bcc +                   ; if borrow occured, look up lower "A"-"Z"
        inx                     ; ("F" upper letter)
        sbc # 26                ; reduce index by 26
        bcc +                   ; if borrow occured, look up lower "A"-"Z"
        inx                     ; ("G" upper letter)
        sbc # 26                ; reduce index by 26
        bcc +                   ; if borrow occured, look up lower "A"-"Z"
        inx                     ; ("H" upper letter)
        sbc # 26                ; reduce index by 26
        bcc +                   ; if borrow occured, look up lower "A"-"Z"
        inx                     ; ("I" upper letter)
        sbc # 26                ; reduce index by 26
.ENDIF  ;///////////////////////////////////////////////////////////////////////
        ; because of the underflow, A is between -230 ($EA) and 255 ($FF).
        ; we need to fix this number to between $41 ("A") and $5A ("Z"):
+       adc # 26+'A'
        rts