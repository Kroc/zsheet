; ZSheet (c) copyright Kroc Camen 2022. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; c64_mem.wla : memory layout for C64
;===============================================================================
; the assembler, WLA-DX, requires a "memory map" to determine where to begin
; assembling. each SLOT in the memory map describes a boundried region of
; memory, however SLOTs are only relevant to how code will be addressed at
; run-time; the binary that is produced packs all bytes together
;
; this is the Commodore 64-specific memory map:
;
.MEMORYMAP
        ;-----------------------------------------------------------------------
        DEFAULTSLOT     2
        SLOTSIZE        $0100
        SLOT 0          $0000   "ZP"
        SLOT 1          $0100   "STACK"
        
        ; main program RAM
        ; ("ROM" in WLA-DX parlance)
        ;
        SLOTSIZE        $F7FA   ; $FFFA-$FFFF are 6502 interrupt vectors
        SLOT 2          $0800   "MAIN"

        SLOTSIZE        $1000
        SLOT 3          $C000   "HIRAM"
        SLOT 4          $D000   "IO"
        SLOTSIZE        $2000
        SLOT 5          $E000   "KERNAL"
.ENDME

; the Commodore 64 has only one "bank" of RAM,
; all of it fits within the 64K address-space
.ROMBANKSIZE            $FDFA
.ROMBANKS               1


;-------------------------------------------------------------------------------
.DEF    basic_start     $0801   ; BASIC programs starting address
.DEF    input_buffer    $0200   ; BASIC/KERNAL input buffer
.DEF    input_index     $0258   ; string-index for the input-buffer
.DEF    INPUT_LENGTH    80      ; capacity of input buffer
                                ; (technically, 88 bytes are available, due to
                                ;  the size of the input-buffer on the VIC-20)


; critical zero-page addresses used by KERNAL / BASIC:
;===============================================================================
.RAMSECTION "ZP_00"     SLOT "ZP"       ORGA $00 FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ; CPU port: memory layout & Datasette
        ;
        ; memory address $00/$01 is hard-wired to the C64's 6510 CPU; the
        ; "processor port", $01, controls the memory layout of the C64 as well
        ; as the Datasette. the "data direction" register, $00, controls which
        ; bits of the processor port can be written to, allowing you to mask
        ; out writes to certain bits -- e.g. ignore writes to the Datasette
        ; when changing memory layout
        ;
        CPU_MASK        BYTE    ; data direction register
        CPU_CONTROL     BYTE    ; processor port (memory layout & Datasette)
.ENDS

;;.RAMSECTION "ZP_73"     SLOT $00 ORGA $73 FORCE RETURNORG
;;        ;---------------------------------------------------------------------
;;        ZP_CHRGET       DSB 23
;;.ENDS
;;
;;.RAMSECTION "ZP_8B"     SLOT $00 ORGA $8b FORCE RETURNORG
;;        ;---------------------------------------------------------------------
;;        ZP_RND_SEED     DSB 5
;;.ENDS

.RAMSECTION "ZP_90"     SLOT "ZP"       ORGA $90 FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ; KERNAL I/O status, bit 6 = EOF
        ZP_IO_STATUS    BYTE    ;=$90
        ; a flag for key-state:
        ; 127: stop, 223: C=, 239: SPACE
        ; 251: CTRL, 255: no key pressed
        ZP_KEY_FLAG     BYTE    ;=$91
.ENDS

.RAMSECTION "ZP_93"     SLOT "ZP"       ORGA $93 FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ; 0 = LOAD, 1 = VERIFY
        ZP_KERNAL_LOAD  BYTE    ;=$93
        
        ; flag for indicating a byte is ready to go out the serial bus
        .               BYTE    ;=$94
        ; serial bus output register
        ZP_SERIAL_OUT   BYTE    ;=$95
.ENDS

.RAMSECTION "ZP_97"     SLOT "ZP"       ORGA $97 FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ; temporary storage for X-register,
        ; used in `KERNAL_CHRIN`
        .               BYTE    ;=$97
        ; "number of open I/O file; pointer to top of file table"
        .               BYTE    ;=$98
        ; current input device, defaults to $00 = keyboard
        ZP_DEV_IN       BYTE    ;=$99
        ; current output device, defaults to $03 = screen
        ZP_DEV_OUT      BYTE    ;=$9A
.ENDS

.RAMSECTION "ZP_9D"     SLOT "ZP"       ORGA $9d FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ;KERNAL message display control:
        ; bit 6 = error messages, bit 7 = control message 
        .               BYTE
.ENDS

.RAMSECTION "ZP_A0"     SLOT "ZP"       ORGA $a0 FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ; C64's "jiffy clock", updated every 60th/s, even on PAL
        ZP_JIFFY        DSB 3   ;=$A0/1/2
        ; bit-counter for serial I/O
        .               WORD    ;=$A3
.ENDS

.RAMSECTION "ZP_AE"     SLOT "ZP"       ORGA $ae FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ; pointer to the last byte after a LOAD/VERIFY/SAVE operation
        ZP_LOAD_LAST    WORD    ;=$AE
.ENDS

.RAMSECTION "ZP_B7"     SLOT "ZP"       ORGA $b7 FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ; length of current filename
        ZP_FILE_NAMELEN BYTE    ;=$B7
        ; current logical file number
        ZP_FILE_NUM     BYTE    ;=$B8
        ; current logical secondary address
        ZP_FILE_ADR     BYTE    ;=$B9
        ; current device number
        ZP_DEV_NUM      BYTE    ;=$BA
        ; pointer to current filename
        ZP_FILENAME     WORD    ;=$BB
.ENDS

.RAMSECTION "ZP_C1"     SLOT "ZP"       ORGA $c1 FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ; start address for LOAD / SAVE
        .               WORD    ;=$C1
        ; end address for LOAD / SAVE
        .               WORD    ;=$C3
        ; matrix co-ordinate of last key press, $40 = none
        ZP_KEY_MATRIX   BYTE    ;=$C5
        ; number of keys in the keyboard buffer
        ZP_KEY_COUNT    BYTE    ;=$C6
        ; print reverse characters?
        ; (used with `KERNAL_CHROUT`)
        ZP_PRINT_RVRS   BYTE    ;=$C7
.ENDS

.RAMSECTION "ZP_CB"     SLOT "ZP"       ORGA $cb FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ; index into key-decoding table for currently pressed key, $40 = none
        ZP_KEY_INDEX    BYTE    ;=$CB
        ; flash cursor? $00 = yes, !$00 = no
        ZP_CRSR_BLINK   BYTE    ;=$CC
        ; counter for cursor flashing
        ZP_CRSR_COUNT   BYTE    ;=$CD
        ; character at cursor position
        ZP_CRSR_CHAR    BYTE    ;=$CE
        ; current cursor state, $00 = visible, !$00 = invisible
        ZP_CRSR_STATE   BYTE    ;=$CF
        ; device number for getting / putting characters;
        ; read/written by `KERNAL_CHRIN` & `KERNAL_CHROUT`
        ; $03 = screen, $00 = other
        ZP_DEV_CHAR     BYTE    ;=$D0

        .               BYTE    ;=$D1
        .               BYTE    ;=$D2
        .               BYTE    ;=$D3
        .               BYTE    ;=$D4
        .               BYTE    ;=$D5
        .               BYTE    ;=$D6
        
        ; last character printed
        ZP_LAST_CHAR    BYTE    ;=$D7

        .               BYTE    ;$=D8
.ENDS

.RAMSECTION "ZP_F3"     SLOT "ZP"       ORGA $f3 FORCE RETURNORG
        ;-----------------------------------------------------------------------
        .               BYTE    ;=$F3
        .               BYTE    ;=$F4
        .               BYTE    ;=$F5
        .               BYTE    ;=$F6
.ENDS