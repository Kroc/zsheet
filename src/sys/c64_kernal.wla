; ZSheet (c) copyright Kroc Camen 2022. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; critical zero-page addresses used by KERNAL / BASIC:
;===============================================================================
.RAMSECTION "ZP_00"     SLOT "ZP"       ORGA $00 FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ; CPU port: memory layout & Datasette
        ;
        ; memory address $00/$01 is hard-wired to the C64's 6510 CPU; the
        ; "processor port", $01, controls the memory layout of the C64 as well
        ; as the Datasette. the "data direction" register, $00, controls which
        ; bits of the processor port can be written to, allowing you to mask
        ; out writes to certain bits -- e.g. ignore writes to the Datasette
        ; when changing memory layout
        ;
        CPU_MASK        BYTE    ; data direction register
        CPU_CONTROL     BYTE    ; processor port (memory layout & Datasette)
.ENDS

;;.RAMSECTION "ZP_73"     SLOT $00 ORGA $73 FORCE RETURNORG
;;        ;---------------------------------------------------------------------
;;        ZP_CHRGET       DSB 23
;;.ENDS
;;
;;.RAMSECTION "ZP_8B"     SLOT $00 ORGA $8b FORCE RETURNORG
;;        ;---------------------------------------------------------------------
;;        ZP_RND_SEED     DSB 5
;;.ENDS

.RAMSECTION "ZP_90"     SLOT "ZP"       ORGA $90 FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ; KERNAL I/O status, bit 6 = EOF
        ZP_IO_STATUS    BYTE    ;=$90
        ; a flag for key-state:
        ; 127: stop, 223: C=, 239: SPACE
        ; 251: CTRL, 255: no key pressed
        ZP_KEY_FLAG     BYTE    ;=$91
.ENDS

.RAMSECTION "ZP_93"     SLOT "ZP"       ORGA $93 FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ; 0 = LOAD, 1 = VERIFY
        ZP_KERNAL_LOAD  BYTE    ;=$93
        
        ; flag for indicating a byte is ready to go out the serial bus
        .               BYTE    ;=$94
        ; serial bus output register
        ZP_SERIAL_OUT   BYTE    ;=$95
.ENDS

.RAMSECTION "ZP_97"     SLOT "ZP"       ORGA $97 FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ; temporary storage for X-register,
        ; used in `KERNAL_CHRIN`
        .               BYTE    ;=$97
        ; "number of open I/O file; pointer to top of file table"
        .               BYTE    ;=$98
        ; current input device, defaults to $00 = keyboard
        ZP_DEV_IN       BYTE    ;=$99
        ; current output device, defaults to $03 = screen
        ZP_DEV_OUT      BYTE    ;=$9A
.ENDS

.RAMSECTION "ZP_9D"     SLOT "ZP"       ORGA $9d FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ;KERNAL message display control:
        ; bit 6 = error messages, bit 7 = control message 
        .               BYTE
.ENDS

.RAMSECTION "ZP_A0"     SLOT "ZP"       ORGA $a0 FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ; C64's "jiffy clock", updated every 60th/s, even on PAL
        ZP_JIFFY        DSB 3   ;=$A0/1/2
        ; bit-counter for serial I/O
        .               WORD    ;=$A3
.ENDS

.RAMSECTION "ZP_AE"     SLOT "ZP"       ORGA $ae FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ; pointer to the last byte after a LOAD/VERIFY/SAVE operation
        ZP_LOAD_LAST    WORD    ;=$AE
.ENDS

.RAMSECTION "ZP_B7"     SLOT "ZP"       ORGA $b7 FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ; length of current filename
        ZP_FILE_NAMELEN BYTE    ;=$B7
        ; current logical file number
        ZP_FILE_NUM     BYTE    ;=$B8
        ; current logical secondary address
        ZP_FILE_ADR     BYTE    ;=$B9
        ; current device number
        ZP_DEV_NUM      BYTE    ;=$BA
        ; pointer to current filename
        ZP_FILENAME     WORD    ;=$BB
.ENDS

.RAMSECTION "ZP_C1"     SLOT "ZP"       ORGA $c1 FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ; start address for LOAD / SAVE
        .               WORD    ;=$C1
        ; end address for LOAD / SAVE
        .               WORD    ;=$C3
        ; matrix co-ordinate of last key press, $40 = none
        ZP_KEY_MATRIX   BYTE    ;=$C5
        ; number of keys in the keyboard buffer
        ZP_KEY_COUNT    BYTE    ;=$C6
        ; print reverse characters?
        ; (used with `KERNAL_CHROUT`)
        ZP_PRINT_RVRS   BYTE    ;=$C7
.ENDS

.RAMSECTION "ZP_CB"     SLOT "ZP"       ORGA $cb FORCE RETURNORG
        ;-----------------------------------------------------------------------
        ; index into key-decoding table for currently pressed key, $40 = none
        ZP_KEY_INDEX    BYTE    ;=$CB
        ; flash cursor? $00 = yes, !$00 = no
        ZP_CRSR_BLINK   BYTE    ;=$CC
        ; counter for cursor flashing
        ZP_CRSR_COUNT   BYTE    ;=$CD
        ; character at cursor position
        ZP_CRSR_CHAR    BYTE    ;=$CE
        ; current cursor state, $00 = visible, !$00 = invisible
        ZP_CRSR_STATE   BYTE    ;=$CF
        ; device number for getting / putting characters;
        ; read/written by `KERNAL_CHRIN` & `KERNAL_CHROUT`
        ; $03 = screen, $00 = other
        ZP_DEV_CHAR     BYTE    ;=$D0

        .               BYTE    ;=$D1
        .               BYTE    ;=$D2
        .               BYTE    ;=$D3
        .               BYTE    ;=$D4
        .               BYTE    ;=$D5
        .               BYTE    ;=$D6
        
        ; last character printed
        ZP_LAST_CHAR    BYTE    ;=$D7

        .               BYTE    ;$=D8
.ENDS

.RAMSECTION "ZP_F3"     SLOT "ZP"       ORGA $f3 FORCE RETURNORG
        ;-----------------------------------------------------------------------
        .               BYTE    ;=$F3
        .               BYTE    ;=$F4
        .               BYTE    ;=$F5
        .               BYTE    ;=$F6
.ENDS

; device numbers:
;===============================================================================
; some KERNAL routines ask for device numbers
;
.ENUMID                 0
.ENUMID DEV_KEY         ; 0  : keyboard
.ENUMID DEV_TAPE        ; 1  : Datasette
.ENUMID DEV_RS232       ; 2  : RS232 serial port
.ENUMID DEV_SCR         ; 3  : the screen
.ENUMID DEV_LPT1        ; 4  : first printer
.ENUMID DEV_LPT2        ; 5  : second printer
.ENUMID DEV_PLOT1       ; 6  : first plotter
.ENUMID DEV_PLOT2       ; 7  : second plotter
.ENUMID DEV_DRV8        ; 8  : disk drive "8"
.ENUMID DEV_DRV9        ; 9  : disk drive "9"
.ENUMID DEV_DRV10       ; 10 : ...
.ENUMID DEV_DRV11       ; 11 : ...
.ENUMID DEV_DRV12       ; 12 : ...
.ENUMID DEV_DRV13       ; 13 : ...
.ENUMID DEV_DRV14       ; 14 : ...
.ENUMID DEV_DRV15       ; 15 : drives above 15 are extremely rare


; KERNAL vectors:
;===============================================================================
; the C64 allows hijacking of the ROM routines via a number of vectors in RAM
; that the user can change to their own routines
.ENUM   $0314

; vector for the interrupt routine.
; default value is $EA31
KERNAL_VECTOR_IRQ       WORD    ;=$0314

; vector for `BRK` instruction interrupt.
; default value is $FE66
KERNAL_VECTOR_BRK       WORD    ;=$0316

; vector for the KERNAL's handling of the Non-Maskable Interrupt; note that
; the CPU hardware vector is executed first, which points into the KERNAL
; by default. this vector only hijacks the NMI when the KERNAL ROM is on.
; if you want to bypass the KERNAL, set the hardware vector directly.
; default value is $FE47
KERNAL_VECTOR_NMI       WORD    ;=$0318

; vector for the KERNAL's `OPEN` routine.
; default value is $F34A
KERNAL_VECTOR_OPEN      WORD    ;=$031a

; vector for the KERNAL's `CLOSE` routine.
; default value is $F291
KERNAL_VECTOR_CLOSE     WORD    ;=$031c

; vector for the KERNAL's `CHKIN` routine.
; default value is $F20E
KERNAL_VECTOR_CHKIN     WORD    ;=$031e

; vector for the KERNAL's `CHKOUT` routine.
; default value is $F250
KERNAL_VECTOR_CHKOUT    WORD    ;=$0320

; vector for the KERNAL's `CLRCHN` routine.
; default value is $F333
KERNAL_VECTOR_CLRCHN    WORD    ;=$0322

; vector for the KERNAL's `CHRIN` routine.
; default value is $F157
KERNAL_VECTOR_CHRIN     WORD    ;=$0324

; vector for the KERNAL's `CHROUT` routine.
; default value is $F1CA
KERNAL_VECTOR_CHROUT    WORD    ;=$0326

; vector for the KERNAL's `STOP` routine.
; default value is $F6ED
KERNAL_VECTOR_STOP      WORD    ;=$0328

; vector for the KERNAL's `GETIN` routine.
; default value is $F13E
KERNAL_VECTOR_GETIN     WORD    ;=$032a

; vector for the KERNAL's `CLALL` routine.
; default value is $F32F
KERNAL_VECTOR_CLALL     WORD    ;=$032c

; an unused vector, default value is $FE66
KERNAL_VECTOR_UNUSED    WORD    ;=$032e

; vector for the KERNAL's `LOAD` routine.
; default value is $F4A5
KERNAL_VECTOR_LOAD      WORD    ;=$0330

; vector for the KERNAL's `SAVE` routine.
; default value is $F5ED
KERNAL_VECTOR_SAVE      WORD    ;=$0332

.ENDE

; KERNAL routines:
;===============================================================================
; initialize VIC; restore default input/output to keyboard/screen;
; clear screen; set PAL/NTSC switch and interrupt timer
;
.DEF    KERNAL_SCINIT           $ff81
.DEF    KERNAL_SCINIT_ADDR      $ff5b

; initialize CIA's, SID volume; setup memory configuration;
; set and start interrupt timer
;
.DEF    KERNAL_IOINIT           $ff84
.DEF    KERNAL_IOINIT_ADDR      $fda3

; clear memory addresses $0002-$0101 and $0200-$03FF; run memory test
; and set start and end address of BASIC work area accordingly;
; set screen memory to $0400 and datasette buffer to $033C
;
.DEF    KERNAL_RAMTAS           $ff87
.DEF    KERNAL_RAMTAS_ADDR      $fd50

; fill vector table at memory addresses $0314-$0333 with default values
;
.DEF    KERNAL_RESTOR           $ff8a
.DEF    KERNAL_RESTOR_ADDR      $fd15

; copy vector table at memory addresses $0314-$0333 from or into user table.
; input:
;       carry : 0 = copy user table into vector table
;               1 = copy vector table into user table
;         X/Y : pointer to user table
;
.DEF    KERNAL_VECTOR           $ff8d
.DEF    KERNAL_VECTOR_ADDR      $fd1a

; set system error display switch at memory address $009D
; input:
;       A : switch value
;
.DEF    KERNAL_SETMSG           $ff90
.DEF    KERNAL_SETMSG_ADDR      $fe18

; send `LISTEN` secondary address to serial bus.
; (must call `LISTEN` beforehand)
; input:
;       A : secondary address.
;
.DEF    KERNAL_LSTNSA           $ff93
.DEF    KERNAL_LSTNSA_ADDR      $edb9

; send `TALK` secondary address to serial bus.
; (must call `TALK` beforehand)
; input:
;       A : secondary address
;
.DEF    KERNAL_TALKSA           $ff96
.DEF    KERANL_TALKSA_ADDR      $ecd7

; save or restore start address of BASIC work area
; input:
;       carry : 0 = restore from input
;               1 = save to output
;         X/Y : address (if carry = 0)
; output:
;         X/Y : address (if carry = 1)
;
.DEF    KERNAL_MEMBOT           $ff99
.DEF    KERNAL_MEMBOT_ADDR      $fe25

; save or restore end address of BASIC work area
; input:
;       carry : 0 = restore from input
;               1 = Save to output
;         X/Y : address (if carry = 0)
; output:
;         X/Y : address (if carry = 1)
;
.DEF    KERNAL_MEMTOP           $ff9c
.DEF    KERNAL_MEMTOP_ADDR      $fe34

; query keyboard; put current matrix code into memory address $CB,
; current status of shift keys into memory address $028D and PETSCII
; code into keyboard buffer
.DEF    KERNAL_SCNKEY           $ff9f
.DEF    KERNAL_SCNKEY_ADDR      $ea87

; unknown. (set serial bus timeout)
; input:
;       A : timeout value
;
.DEF    KERNAL_SETTMO           $ffa2
.DEF    KERNAL_SETTMO_ADDR      $fe21

; read byte from serial bus.
; (must call `TALK` and `TALKSA` beforehand)
; output:
;       A : byte read
;
.DEF    KERNAL_IECIN            $ffa5
.DEF    KERNAL_IECIN_ADDR       $ee13

; write byte to serial bus.
; (must call `LISTEN` and `LSTNSA` beforehand)
; input:
;       A : byte to write
;
.DEF    KERNAL_IECOUT           $ffa8
.DEF    KERNAL_IECOUT_ADDR      $eddd

; send `UNTALK` command to serial bus
.DEF    KERNAL_UNTALK           $ffab
.DEF    KERNAL_UNTALK_ADDR      $edef

; send `UNLISTEN` command to serial bus
.DEF    KERNAL_UNLSTN           $ffae
.DEF    KERNAL_UNLSTN_ADDR      $edfe

; send `LISTEN` command to serial bus
; input:
;       A : device number
;
.DEF    KERNAL_LISTEN           $ffb1
.DEF    KERNAL_LISTEN_ADDR      $ed0c

; send `TALK` command to serial bus
; input:
;       A : device number
;
.DEF    KERNAL_TALK             $ffb4
.DEF    KERNAL_TALK_ADDR        $ed09

; fetch status of current input/output device, value of `ST` variable
; (for RS232, status is cleared)
; output:
;       A : device status
;
.DEF    KERNAL_READST           $ffb7
.DEF    KERNAL_READST_ADDR      $fe07

; set file parameters
; input:
;       A : logical number
;       X : device number
;       Y : secondary address
;
.DEF    KERNAL_SETLFS           $ffba
.DEF    KERNAL_SETLFS_ADDR      $fe00

; set file name parameters
; input:
;         A : file name length
;       X/Y : pointer to file name
;
.DEF    KERNAL_SETNAM           $ffbd
.DEF    KERNAL_SETNAM_ADDR      $fdf9

; open file (must call `SETLFS` and `SETNAM` beforehand)
.DEF    KERNAL_OPEN             $ffc0
.DEF    KERNAL_OPEN_ADDR        $f34a

; close file
; input:
;       A : logical number
;
.DEF    KERNAL_CLOSE            $ffc3
.DEF    KERNAL_CLOSE_ADDR       $f291

; define file as default input
; (must call `OPEN` beforehand)
; input:
;       X : logical number
;
.DEF    KERNAL_CHKIN            $ffc6
.DEF    KERNAL_CHKIN_ADDR       $f20e

; define file as default output
; (must call `OPEN` beforehand)
; input:
;       X : logical number
;
.DEF    KERNAL_CHKOUT           $ffc9
.DEF    KERNAL_CHKOUT_ADDR      $f250

; close default input/output files (for serial bus, send `UNTALK` and/or
; `UNLISTEN`); restore default input/output to keyboard/screen
.DEF    KERNAL_CLRCHN           $ffcc
.DEF    KERNAL_CLRCHN_ADDR      $f333

; read byte from default input (for keyboard, read a line from the screen).
; (if not keyboard, must call `OPEN` and `CHKIN` beforehand)
; output:
;       A : byte read
;
.DEF    KERNAL_CHRIN            $ffcf
.DEF    KERNAL_CHRIN_ADDR       $f157

; write byte to default output
; (if not screen, must call `OPEN` and `CHKOUT` beforehand)
; input:
;       A : byte to write
;
.DEF    KERNAL_CHROUT           $ffd2
.DEF    KERNAL_CHROUT_ADDR      $f1ca

; load or verify file. (must call `SETLFS` and `SETNAM` beforehand)
; input:
;           A : 0 = load, 1-255 = verify;
;         X/Y : load address (if secondary address = 0)
; output:
;       carry : 0 = no errors, 1 = error
;           A : KERNAL error code (if carry = 1)
;         X/Y : address of last byte loaded/verified (if carry = 0)
;
.DEF    KERNAL_LOAD             $ffd5
.DEF    KERNAL_LOAD_ADDR        $f49e

; save file. (must call `SETLFS` and `SETNAM` beforehand)
; input:
;           A : address of zero page register holding
;               start address of memory area to save
;         X/Y : End address of memory area plus 1.
; output:
;       carry : 0 = No errors, 1 = Error
;           A : KERNAL error code (if carry = 1)
;
.DEF    KERNAL_SAVE             $ffd8
.DEF    KERNAL_SAVE_ADDR        $f5dd

; set Time of Day, at memory address $00A0-$00A2
; input:
;       A/X/Y : new TOD value
;
.DEF    KERNAL_SETTIM           $ffdb
.DEF    KERNAL_SETTIM_ADDR      $f6e4

; read Time of Day, at memory address $00A0-$00A2
; output:
;       A/X/Y : current TOD value
;
.DEF    KERNAL_RDTIM            $ffde
.DEF    KERNAL_RDTIM_ADDR       $f6dd

; query Stop key indicator, at memory address $0091;
; if pressed, call CLRCHN and clear keyboard buffer
; output:
;        zero : 0 = not pressed, 1 = pressed
;       carry : 1 = pressed
;
.DEF    KERNAL_STOP             $ffe1
.DEF    KERNAL_STOP_ADDR        $f6ed

; read byte from default input
; (if not keyboard, must call `OPEN` and `CHKIN` beforehand)
; output:
;       A : byte read
;
.DEF    KERNAL_GETIN            $ffe4
.DEF    KERNAL_GETIN_ADDR       $f13e

; clear file table; call `CLRCHN`
.DEF    KERNAL_CLALL            $ffe7
.DEF    KERNAL_CLALL_ADDR       $f32f

; update Time of Day, at memory address $00A0-$00A2,
; and stop-key indicator, at memory address $0091
.DEF    KERNAL_UDTIM            $ffea
.DEF    KERNAL_UDTIM_ADDR       $f69b

; fetch number of screen rows and columns
; output:
;       X : number of columns (40)
;       Y : number of rows (25)
;
.DEF    KERNAL_SCREEN           $ffed
.DEF    KERNAL_SCREEN_ADDR      $e505

; save or restore cursor position
; input:
;       carry : 0 = restore from input, 1 = save to output
;           X : cursor column (if carry = 0)
;           Y : cursor row (if carry = 0)
; output:
;           X : cursor column (if carry = 1)
;           Y : cursor row (if carry = 1)
;
.DEF    KERNAL_PLOT             $fff0
.DEF    KERNAL_PLOT_ADDR        $e50a

; fetch CIA1 base address
; output:
;       X/Y : CIA1 base address ($DC00)
;
.DEF    KERNAL_IOBASE           $fff3
.DEF    KERNAL_IOBASE_ADDR      $e500
