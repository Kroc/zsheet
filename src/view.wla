; ZSheet (c) copyright Kroc Camen 2022. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; this is the maximum number of columns that can fit on screen:
; it's based upon the minimum allowed column-width, +1 because
; the 'column width' doesn't include the borders that are
; automatically inserted between rows
.DEF    VIEW_COLS       (SYS_SCREEN_COLS / (ZS_COL_WIDTH_MIN+1)) + 1

; a view is the size/position of a window into the current sheet
;
.STRUCT View
        col             BYTE    ; top-left column in view (scroll-offset)
        row             WORD    ; top-left row in view (scroll-offset)
        y               BYTE    ; screen-row the view begins at
        h               BYTE    ; number of screen-rows visible in the view
        cursor          INSTANCEOF Rc
.ENDST

.RAMSECTION "ZP_VIEWS"  SLOT "ZP" RETURNORG
        zp_view         INSTANCEOF View
.ENDS

.RAMSECTION "ZP_COPY"   SLOT "ZP" RETURNORG
        ; a destination pointer for copying screen rows
        zp_screen_copy  WORD
        ; a destination pointer for copying colour-RAM rows
        zp_colour_copy  WORD
.ENDS

.RAMSECTION "ZS_WORK"   SLOT "LORAM" RETURNORG
        ; a list of the column widths currently on screen
        view_col_widths DS VIEW_COLS
.ENDS


init_view:
;===============================================================================
; intialise the default view properties:
;-------------------------------------------------------------------------------
        ldx # 0
        jsr set_row
        jsr set_col

        ; set starting position of the cell cursor
        stx zp_view.cursor.col
        stx zp_view.cursor.row
        stx zp_col_sel
        stx zp_row_sel

        ; set the position/size
        ; of the default view:
        ;
        lda # 1                 ; sheet starts on the second screen row
        sta zp_view.y
        ; number of screen-rows in the view:
        ; height of the screen sans 1 for the table tabs
        ; and another 2 for the status & formula bar
        lda # SYS_SCREEN_ROWS - 2 - 2
        sta zp_view.h

        rts


set_col:
;===============================================================================
; set the view's column scroll offset,
; i.e. which column appears first:
;
; this routine populates the cache of column widths currently visible
; in the view, but it doesn't do any drawing 
;
; in:   X       column number, 0-255
; out:  X, Y    (preserved)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        stx.w @x+1              ; preserve X
        sty.w @y+1              ; preserve Y

        stx zp_view.col         ; set the view's column number

        ; copy the column widths, starting
        ; from this column, to the cache:
        ;
        ldy # 0                 ; counter for the cache bytes
-       lda zs_cols, x          ; read the column-width
        sta view_col_widths, y  ; write to the cache
        inx                     ; step forward. note that it doesn't matter
        iny                     ;  if these wrap-around! the view will not 
        cpy # VIEW_COLS         ;  draw beyond the 255th column
        bcc -

@x      ldx # $88               ; restore X
@y      ldy # $88               ; restore Y
        rts 

set_row:
;===============================================================================
; sets the view's row scroll offset,
; i.e. which row appears first:
;
; this routine doesn't yet do any caching,
; but might in the future. no drawing is done!
;
; in:   X       row number
; out:  A, X, Y (preserved)
;-------------------------------------------------------------------------------
        stx zp_view.row
        rts


row_to_screen:
;===============================================================================
; for a given sheet-row, returns the screen-row it appears on, if visible:
;
; in:   A       sheet-row
; out:  carry   clear if row is on-screen, set if not visible
;       A       screen-row the sheet-row can be found on
;       X, Y    (preserved)
;-------------------------------------------------------------------------------
        jsr row_to_view
        bcs @rts

        adc zp_view.y

@rts:   rts


row_to_view:
;===============================================================================
; given a sheet-row, returns which row of the view it appears on, if visible:
;
; in:   A       sheet-row
; out:  carry   clear if row is on-screen, set if not visible
;       A       view-row the sheet-row can be found on
;       X, Y    (preserved)
;-------------------------------------------------------------------------------
        ; first, is the sheet-row within the view's scroll-offset?
        sec
        sbc zp_view.row
        bcc @rts                ; if row is above view, exit with carry set
        cmp zp_view.h           ; is row below view?
        bcs @rts

        adc # 1                 ; compensate for the column-headers!

@rts:   rts


col_to_screen:
;===============================================================================
; for a given sheet-col, returns the screen-col it appears on, if visible:
;
; in:   A       sheet-col
; out:  carry   clear if column is on-screen, set if not visible
;       A       screen-col the sheet-col can be found on
;-------------------------------------------------------------------------------
        jsr col_to_view
        bcs @rts

        beq @left               ; for the first column, nothing to add!

        stx.w @x+1              ; preserve X
        sty.w @y+1              ; and Y

        ; add column-widths until we get to the column we're looking for
        ;
        tax                     ; counter for number of columns-widths to add
        lda # 0                 ; running count of widths
        tay                     ; on-screen column number starting from 0
-       adc.w view_col_widths,x ; add the col-width
        iny                     ; move to next column
        dex                     ; decrement column count
        bne -                   ; keep goin?

@x:     ldx # $88
@y:     ldy # $88

@left:  adc # 3                 ; TODO: compensate for the row-numbers!
@rts:   rts


col_to_view:
;===============================================================================
; given a sheet-col, returns which column number
; of the view it appears on, if visible:
;
; in:   A       sheet-col
; out:  carry   clear if col is on-screen, set if not visible
;       A       view-col the sheet-col can be found on
;-------------------------------------------------------------------------------
        ; is the sheet-col within the view's scroll-offset?
        sec
        sbc zp_view.col
        bcc @rts                ; if col is before view, exit with carry set
        cmp # VIEW_COLS         ; if col after view, set carry

@rts:   rts


cursor_up:
;===============================================================================
; move the cursor up a row:
;
;-------------------------------------------------------------------------------
        lda zp_view.cursor.row  ; are we at the top-most row (0)?
        beq @rts                ; can't go up!

        tax
        dex                     ; move up one row
        stx zp_view.cursor.row  ; set the new value

        jsr @draw               ; redraw previous row to clear cursor highlight

        ; do we need to scroll the view?
        ;-----------------------------------------------------------------------
        ; we only want to scroll at the edges of the view rather than all the
        ; time so we wait until the 2nd row in the view so that one row is
        ; always visible above the cursor (instead of cursoring "blind")
        ;
        lda zp_view.cursor.row  ; if cursor is (now) at row 0,
        beq @draw               ; no scrolling up can occur anyway

        ldx zp_view.row         ; do an off-by-one comparison on purpose
        cpx zp_view.cursor.row  ;  to aim for the 2nd sheet-row of the view
        bcc @draw
        
        dec zp_view.row         ; move view up a row
        jsr scroll_up           ;  and do the hard scroll
        
        lda zp_view.cursor.row  ; redraw sheet row to show/hide cursor

        ;-----------------------------------------------------------------------
@draw:  sta zp_drawrc.row       ; set the sheet-row to draw
        jsr row_to_screen       ; from the sheet-row, get an on-screen row

        bcs @rts                ; if outside view, don't draw anything

        tax                     ; screen-row to draw on
        jsr set_scr_addr        ; set the screen drawing address
        jmp draw_row            ; draw the row's contents!

@rts:   rts


cursor_down:
;===============================================================================
; move the cursor down one row:
;-------------------------------------------------------------------------------
        ldx zp_view.cursor.row  ; are we at the bottom most row in the sheet?
        txa                     ; (keep previous row number)
        inx                     ; move to next row
        beq @rts                ; if overflow 255->0, can't move down

        stx zp_view.cursor.row  ; update row, but keep previous value in A
        jsr @draw               ; redraw previous row to clear cursor highlight

        ; do we need to scroll the view?
        ;-----------------------------------------------------------------------
        ; we only want to scroll at the edges of the view rather than all the
        ; time so we wait until the 2nd-to-last row in the view so that one row
        ; is always visible below the cursor (instead of cursoring "blind")
        ;
        lda zp_view.cursor.row  ; current absolute cursor row
        jsr row_to_view         ; get relative row number within the view
        adc # 1                 ; add 1 to compensate for the 2nd-to-last row
        sbc zp_view.h           ; are we at the bottom of the view?
        bcc @next               ; if no, don't scroll

        ; when scrolling down we need to stop scrolling when the last row
        ; hits the *bottom* of the view, accounting for the view height
        ;
        ; since the bottom of the sheet is row 255 (0-based), subtract the
        ; height of the view to work out the row number at the top of the
        ; view that causes row 255 to appear at the bottom of the view
        ;
        sec                     ; clear borrow for subtraction
        lda # $00               ; prepare for 256-H
        sbc zp_view.h           ; subtract the view height
        sta.w @@dnrow+1         ; write this into our compare

        lda zp_view.row
@@dnrow cmp # $ff
        bcs @next

        ; scroll the view, copying screen-rows up without having
        ; to redraw rows except the ones that appear at the bottom
        jsr scroll_down

        ;-----------------------------------------------------------------------
@next:  lda zp_view.cursor.row  ; redraw the new row to add cursor highlight
        
        ;-----------------------------------------------------------------------
@draw:  sta zp_drawrc.row       ; set the sheet-row to draw
        jsr row_to_screen       ; from the sheet-row, get an on-screen row
        bcs @rts                ; if outside view, don't draw anything

        tax                     ; screen-row to draw on
        jsr set_scr_addr        ; set the screen drawing address
        jmp draw_row            ; draw the row's contents!

@rts:   rts


cursor_right:
;===============================================================================
; move the cursor right one row:
;-------------------------------------------------------------------------------
        ldx zp_view.cursor.col  ; are we at the right-most col in the sheet?
        txa                     ; (keep previous col number)
        inx                     ; move to next col
        beq @rts                ; if overflow 255->0, can't move right

        stx zp_view.cursor.col  ; update cursor col, but keep previous in A
        jsr draw_screen         ; redraw previous col to clear cursor highlight

        ; do we need to scroll the view?
        ;-----------------------------------------------------------------------
        ; we only want to scroll at the edges of the view rather than all the
        ; time so we wait until the 2nd-to-last col in the view so that one col
        ; is always visible before the cursor (instead of cursoring "blind")
        ;
        lda zp_view.cursor.col  ; current absolute cursor col
        jsr col_to_view         ; get relative col number within the view
        adc # 1                 ; add 1 to compensate for the 2nd-to-last col
        
        ; TODO: we need to know the actual number of columns that fit
        ;               on the screen! (this should be calulated by `set_col`)
        
        jmp draw_screen
        ;-----------------------------------------------------------------------

        jsr @draw               ; redraw old col to erase cursor highlight
                
        ;-----------------------------------------------------------------------
@next:  lda zp_view.cursor.col  ; redraw the new col to add cursor highlight
        
        ;-----------------------------------------------------------------------
@draw:  sta zp_drawrc.col       ; set the sheet-col to draw
        jsr col_to_screen       ; from the sheet-col, get an on-screen col
        bcs @rts

@rts:   rts

scroll_down:
;===============================================================================
        ldx zp_view.h           ; number of rows to scroll
        dex                     ; less one because a new row will be drawn in

        ; we could copy 40 columns each loop but bumping the source and
        ; destination addresses forward is expensive so instead we do as many
        ; rows as will fit within an 8-bit index (i.e. 6, for 40 columns)
        ;
        lda.w copy_rows_remainder-1, x
        sta.w @rem+1
        ; given the number of rows to copy, lookup in a table the number of
        ; complete iterations required (6 rows per iteration for 40 columns)
        lda.w copy_rows_iterations-1, x
        ; if this is zero, then there is less than one full iteration
        ; of chars to copy (e.g. <6 rows for 40 columns)
        beq @rem
        ; write this count into the loop
        sta.w @ldx+1
        
        ; set the source and destination addresses
        ; to the 2nd row of the view
        ldx zp_view.y
        inx
        inx
        jsr set_scr_addr_copy
        ; now set the source address to the first row
        dex
        jsr set_scr_addr

@ldx    ldx # 1
        ;-----------------------------------------------------------------------
@copy:  ldy # 0
-       lda [zp_screen_copy], y
        sta [zp_screen], y
        lda [zp_colour_copy], y
        sta [zp_colour], y
        iny
        cpy # floor( 256 / SYS_SCREEN_COLS ) * SYS_SCREEN_COLS
        bcc -

        ; bump the source and destination addresses
        ; forward as Y has reached its limit
        jsr bump_addr_copy

        dex
        bne @copy

        ; copy remainder
        ;-----------------------------------------------------------------------
@rem:   ldx # 0
        beq @new

-       lda [zp_screen_copy], y
        sta [zp_screen], y
        lda [zp_colour_copy], y
        sta [zp_colour], y
        iny
        dex
        bne -

        jsr bump_addr_copy

        ; draw the new row's contents
        ;-----------------------------------------------------------------------
@new:   clc
        lda zp_view.row
        inc zp_view.row
        adc zp_view.h
        sta zp_drawrc.row
        jmp draw_row


scroll_up:
;===============================================================================
        ; we need to start with copying the 2nd-to-last row down to the
        ; last row and then walk up the screen, copying rows down by one
        ;
        sec                     ; (+1 for column headers!)
        lda.b zp_view.y
        adc.b zp_view.h
        tax
        dex
        dex
        jsr set_scr_addr_copy
        inx                     ; set the source address to the previous row
        jsr set_scr_addr

        ldx zp_view.h
        dex
        ;-----------------------------------------------------------------------
@copy:  ldy # SYS_SCREEN_COLS-1
-       lda [zp_screen_copy], y
        sta [zp_screen], y
        lda [zp_colour_copy], y
        sta [zp_colour], y
        dey
        bpl -

        ; TODO: we should just use the screen-addr lookup table for this
        ;
@next:  sec
        lda.b zp_screen+LO
        sbc # SYS_SCREEN_COLS
        bcs +
        dec.b zp_screen+HI
        dec.b zp_colour+HI
        sec                     ; set carry only when needed to save 2 cycles
+       sta.b zp_screen+LO
        sta.b zp_colour+LO

        lda.b zp_screen_copy+LO
        sbc # SYS_SCREEN_COLS
        bcs +
        dec.b zp_screen_copy+HI
        dec.b zp_colour_copy+HI
+       sta.b zp_screen_copy+LO
        sta.b zp_colour_copy+LO

        dex
        bne @copy

        ;-----------------------------------------------------------------------
        lda zp_view.row         ; fill in the new row
        sta zp_drawrc.row       ; TODO: this should be part of `scroll_view_up`
        jmp draw_row


.SECTION "COPYROWS_TABLE" BITWINDOW 8
;###############################################################################
.DEF    _ROWS_PER_ITER  floor( 256 / SYS_SCREEN_COLS )

;;copy_rows_index:
;;        ;-----------------------------------------------------------------------
;;        ; a small table of multiples of screen widths that fit within 1 byte
;;        ; e.g. with a 40-column screen: 40, 80, 120, 160, 200, 240; meaning
;;        ; that up to 6 screen rows can be traversed within a one byte index
;;        ;
;;.REPEAT _ROWS_PER_ITER INDEX I
;;        .BYTE I * SYS_SCREEN_COLS
;;.ENDR

copy_rows_iterations:
        ;-----------------------------------------------------------------------
        ; for a given number of rows, how many times a full-byte's worth of
        ; rows should be processed. the remainder is given in the next table
        ;
.REPEAT SYS_SCREEN_ROWS INDEX R
        .BYTE R / _ROWS_PER_ITER
.ENDR

copy_rows_remainder:
        ;-----------------------------------------------------------------------
.REPEAT SYS_SCREEN_ROWS INDEX R
        .BYTE (R+1) * SYS_SCREEN_COLS # _ROWS_PER_ITER * SYS_SCREEN_COLS
.ENDR

;###############################################################################
.ENDS