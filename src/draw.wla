; ZSheet (c) copyright Kroc Camen 2022. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
.RAMSECTION "ZP_SCREEN" SLOT "ZP" RETURNORG
        ; a vector specifically for putting characters to screen
        ; -- this is always the current drawing address on screen
        zp_screen       WORD
        ; as with `zp_screen` this is the position in colour RAM.
        ; the two are kept in sync when using `bump_addr`
        zp_colour       WORD
.ENDS

.RAMSECTION "ZP_MODE"   SLOT "ZP" RETURNORG
        ; a bitmask ORed with characters before being printed;
        ; use %10000000 ($80) for reverse-video and %01000000 to force capitals
        zp_print_mask   BYTE
        ; current printing colour
        zp_print_colour BYTE
.ENDS

.RAMSECTION "ZP_DRAWRC" SLOT "ZP" RETURNORG
;///////////////////////////////////////////////////////////////////////////////
        zp_draw         INSTANCEOF Rc
        ; during drawing of column & row headers and cells, these are flags
        ; used to indicate if the selection is within the current column/row
        zp_col_sel      BYTE
        zp_row_sel      BYTE
        ; counter when drawing multiple rows or columns
        zp_c            BYTE
;///////////////////////////////////////////////////////////////////////////////
.ENDS


; tables for looking up the screen / colour-RAM
; addresses for each screen row:
;
.SECTION "ZS_SCREEN_ADDR" BITWINDOW 8
;###############################################################################

screen_addrs:
;===============================================================================
screen_addrs_lo:
;-------------------------------------------------------------------------------
.REPEAT SYS_SCREEN_ROWS INDEX R
        .BYTE <(zs_screen + R * SYS_SCREEN_COLS)
.ENDR
;-------------------------------------------------------------------------------
screen_addrs_hi:
;-------------------------------------------------------------------------------
.REPEAT SYS_SCREEN_ROWS INDEX R
        .BYTE >(zs_screen + R * SYS_SCREEN_COLS)
.ENDR
;-------------------------------------------------------------------------------
colour_addrs_hi:
;-------------------------------------------------------------------------------
.REPEAT SYS_SCREEN_ROWS INDEX R
        .BYTE >($d800 + R * SYS_SCREEN_COLS)
.ENDR

;###############################################################################
.ENDS


set_scr_addr:
;===============================================================================
; set the screen and colour-RAM drawing addresses,
; given a screen-row (not a sheet row!)
;
; in:   X                       screen row to set drawing addresses to
; out:  X, Y                    (preserved)
;       A                       (clobbered)
;-------------------------------------------------------------------------------
        lda.w screen_addrs_lo, x
        sta.b zp_screen+LO      ; the lo-bytes are shared between
        sta.b zp_colour+LO      ;  the screen-RAM and colour-RAM
        lda.w screen_addrs_hi, x
        sta.b zp_screen+HI
        lda.w colour_addrs_hi, x
        sta.b zp_colour+HI
        rts


set_scr_dest:
;===============================================================================
; set the screen and colour-RAM destination addresses
; for a screen copy given a screen-row:
;
; in:   X                       screen row to set copy destination addresses to
; out:  X, Y                    (preserved)
;       A                       (clobbered)
;-------------------------------------------------------------------------------
        lda.w screen_addrs_lo, x
        sta.b zp_screen_dest+LO ; the lo-bytes are shared between
        sta.b zp_colour_dest+LO ;  the screen-RAM and colour-RAM
        lda.w screen_addrs_hi, x
        sta.b zp_screen_dest+HI
        lda.w colour_addrs_hi, x
        sta.b zp_colour_dest+HI
        rts


bump_addr_copy:
;===============================================================================
; bump the main printing addresses forward and the copy addresses to match:
;
; when indexing using Y, this routine is used to bump the 16-bit source &
; destination address up according to the value in Y to avoid an 8-bit
; rollover in Y
;
; in:   Y                       current offset from the screen copy addresses
; out:  Y                       set to zero
;       X                       (preserved)
;       A                       (clobbered)
;-------------------------------------------------------------------------------
        tya                     ; take current offset
;;      bpl ++
        clc                     ; prepare for math!
        adc zp_screen_dest+LO   ; add Y to the address lo-byte
        bcc +                   ; if it doesn't overflow, skip the hi-byte
        inc zp_screen_dest+HI   ; increment the print address hi-byte,
        inc zp_colour_dest+HI   ; and the colour address likewise
+       sta zp_screen_dest+LO   ; update the address lo-byte --
        sta zp_colour_dest+LO   ; these are the same between print & colour

++      ; fall through to bump the main addresses and reset Y
        ; ...

bump_addr:
;===============================================================================
; add Y to `zp_screen` & `zp_colour`:
;
; when indexing using Y, this routine is used to bump the 16-bit address
; up according to the value in Y to avoid an 8-bit rollover in Y
;
; in:   Y                       current offset from the screen print addresses
; out:  Y                       set to zero
;       X                       (preserved)
;       A                       (clobbered)
;-------------------------------------------------------------------------------
        tya                     ; take current offset
;;      bpl ++
        clc                     ; prepare for math!
        adc zp_screen+LO        ; add Y to the address lo-byte
        bcc +                   ; no overflow? skip hi-bytes
        inc zp_screen+HI        ; increment the print address hi-byte,
        inc zp_colour+HI        ; and the colour address likewise
+       sta zp_screen+LO        ; update the address lo-byte --
        sta zp_colour+LO        ; shared between print & colour

        ; Y is set back to zero so that `lda [zp_screen], y`
        ; reflects the same address as before!
        ldy # 0
        
++      rts


next_scr_row:
;===============================================================================
; bump the screen and colour addresses to the next row; i.e. add 40
;
; out:  Y       (preserved)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        clc                     ; prepare for math!
        lda zp_screen+LO
        adc # SYS_SCREEN_COLS
        bcc +                   ; no overflow? skip hi-bytes
        inc zp_screen+HI        ; increment the print address hi-byte,
        inc zp_colour+HI        ; and the colour address likewise
+       sta zp_screen+LO        ; update the address lo-byte --
        sta zp_colour+LO        ; shared between print & colour
        
        rts

/*
highlight_chars:
;===============================================================================
; convert some characters on screen into reverse-video
; (e.g. for cell cursor)
;
; in:   Y       starting offset from screen row, i.e. x-pos on screen
;       X       number of character cells to reverse (1-based)
;-------------------------------------------------------------------------------
-       lda [zp_screen], y
        ora # %10000000
        sta [zp_screen], y
        lda # VIC_YELLOW
        sta [zp_colour], y
        iny
        dex
        bne -
        rts


unlight_chars:
;===============================================================================
; remove highlight from characters:
;
; in:   Y       starting offset from screen row, i.e. x-pos on screen
;       X       number of character cells to un-reverse (1-based)
;-------------------------------------------------------------------------------
-       lda [zp_screen], y
        and %01111111
        sta [zp_screen], y
        lda # VIC_CYAN
        sta [zp_colour], y
        iny
        dex
        bne -
        rts
*/

draw_screen:
;===============================================================================
; does a complete screen draw:
;
;-------------------------------------------------------------------------------
        jsr draw_tabs
        jsr draw_status_bar
        jsr draw_formula_bar
        jmp draw_view           ; do a complete redraw of the view


draw_tabs:
;===============================================================================
; do a complete draw of the table tabs:
;-------------------------------------------------------------------------------
        ldx # 0
        jsr set_scr_addr

        clc                     ; clear reverse-video,
        asl zp_print_mask       ; if set

        ldy # 0
        ldx # SYS_SCREEN_COLS
        lda # VIC_CYAN
        jmp fast_spaces_colour


draw_status_bar:
;===============================================================================
; do a complete draw of the status bar:
;-------------------------------------------------------------------------------
        ldx # SYS_SCREEN_ROWS-2 ; move to the 2nd to last screen row,
        jsr set_scr_addr        ;  where the status bar is
        
        ; set reverse-video drawing
        lda # %10000000
        sta zp_print_mask

        ; print spaces:
        ldy # 0                 ; starting at the left,
        ldx # SYS_SCREEN_COLS   ;  across the whole screen,
        lda # VIC_CYAN          ;  with this colour
        jsr fast_spaces_colour

        ; fallthrough
        ; ...

draw_status_range:
;===============================================================================
; draw the current selection range on the status bar:
;
; TODO: this should ideally handle overprinting a shorter location over
;       a longer one, e.g. covering "IV8191" with "A2", where extra spaces
;       are need to avoid a munge like "A28191"
;-------------------------------------------------------------------------------
        ; set reverse-video drawing
        lda # %10000000
        sta zp_print_mask

        ldx # SYS_SCREEN_ROWS-2 ; move to the 2nd to last screen row,
        jsr set_scr_addr        ; where the status bar is
        ldy # 2

        lda # '@'               ; print the leading "@"
        jsr print_char

        ; print cursor column:
        ;-----------------------------------------------------------------------
        ; TODO: this should be its own routine since the same code
        ;       is used when printing headers
        ;
        lda zp_view.sel.col
        jsr col_index_to_alpha  ; convert to letter(s)
        cpx # $40               ; is there an upper-letter?
        beq +                   ; if not, skip over printing upper-letter

        pha                     ; put aside lower-letter
        txa                     ; get upper-letter
        ora # %10000000         ; set reverse video
        sta [zp_screen], y      ; print upper-letter
        iny                     ; move to next character on screen
        pla                     ; retrieve lower-letter

+       ora # %10000000         ; set reverse video
        sta [zp_screen], y      ; print lower-letter
        iny

        ; print cursor row:
        ;-----------------------------------------------------------------------
        ; TODO: there should be an optimised 4-digit routine for printing
        ;       row numbers as the full 16-bit range is not needed
        ;
        lda zp_view.sel.row_lo
        ldx zp_view.sel.row_hi
        jsr print_number_word

        rts


draw_formula_bar:
;===============================================================================
; do a complete draw of the table tabs:
;-------------------------------------------------------------------------------
        ldx # 0
        jsr set_scr_addr

        clc                     ; clear reverse-video,
        asl zp_print_mask       ; if set

        ldy # 0
        ldx # SYS_SCREEN_COLS
        lda # VIC_CYAN
        jmp fast_spaces_colour


draw_view:
;===============================================================================
; does a complete draw of the spreadsheet view:
;
;-------------------------------------------------------------------------------
        jsr draw_col_headers
        jmp draw_rows


draw_col_headers:
;===============================================================================
; draws the column headers (for the current view) across the screen:
;
;-------------------------------------------------------------------------------
        ldx zp_view.y           ; set the screen address to the top of
        jsr set_scr_addr        ;  the View, where the column-headers reside

        ; left-hand offset:
        ;
        ; fill in the corner bit of the sheet:
        ;
        sec                     ; enable reverse-video printing
        ror zp_print_mask
        ldy # 0                 ; start screen col...
        ldx # 3                 ; width...
        lda # VIC_CYAN          ; colour...
        jsr fast_spaces_colour  ; print!

        ; first column to begin drawing
        ldx zp_view.col
        stx zp_draw.col

        ; keep drawing columns until we reach the edge
        ; of the screen, or we reach column 255 ("IV")!
        ;
-       lda zs_cols, x          ; get column width
        jsr draw_col_header     ; draw the column header
        cpy # SYS_SCREEN_COLS   ; have we hit the edge of the screen?
        beq +                   ; if so -- stop drawing column headers
        inx                     ; move to next column number,
        bne -                   ; and draw again

        ; when the column headers hit the edge of the screen, Y will already
        ; be equal to the screen width and `bump_addr` will update `zp_screen`
        ; and wrap Y back to zero. if we hit the last column ("IV") before
        ; hitting the edge of the screen, we need to clear the right-hand
        ; side of the screen to avoid grabage from the previous scroll
        ;
        ; calculate the remaining number of screen cols:
        ; we can't just subtact Y from A on the 6502, but we can simulate
        ; a subtraction through an addition that wraps around!
        ;
        tya                     ; (current screen pos)
        ; add the inverted value of the screen width
        adc # $ff-SYS_SCREEN_COLS
        eor # %11111111         ; flip the bits back to positive
        asl zp_print_mask       ; (turn off reverse-video)
        jsr fast_spaces_A       ; print spaces to the end of the screen

        ; add Y to the screen address to reset
        ; Y to zero on the next screen row
+       jmp bump_addr


draw_col_header:
;===============================================================================
; draw a column header:
;
; drawing will stop if the column hits the edge of the screen
;
; in:   A       column width. the right border is added automatically
;       X       column number (0-255), which will be converted to alpha
;       Y       starting screen position, where `zp_screen` is screen row
;               addr, e.g. `zp_screen` = $0400, Y is sceen col. 0-39
;
; out:  X       the column number is not incremented for the benefit
;               of printing a column of the sheet vertically
;       Y       the screen position is moved forward over the column
;       A       (clobbered)
;===============================================================================
        sta zp_a                ; set aside column width
        stx zp_x                ; set aside column index
        sty zp_y                ; set aside current screen position

        ; we want to highlight the column if the cursor /
        ; selection is within this column
        ;
        ; TODO: this selecting of colour should be in a routine / 
        ;       optimised to not need a branch?
        lda # VIC_CYAN
        cpx zp_view.sel.col
        bne +
        lda # VIC_YELLOW
+       sta zp_print_colour

        ; when printing, X will be the number of chars to print;
        ; to begin with, set this to the column width
        ldx zp_a
        
        ; enable reverse video printing
        lda # %10000000
        sta zp_print_mask

        clc
        lda # SYS_SCREEN_COLS
        sbc zp_y
        cmp zp_a
        bcs +

        ; use the clipped column-width instead
        tax
        inx

        ; draw header background:
+       lda zp_print_colour
        ; note that X already contains column width to draw
        jsr fast_spaces_colour  ; NOTE: does not modify carry!
        bcc +
        
        ; print the right-border:
        lda # $91
.IFDEF  OPTIMIZE_SIZE
        ;///////////////////////////////////////////////////////////////////////
        jsr print_char_colour
.ELSE   ;///////////////////////////////////////////////////////////////////////
        ;;ora zp_print_mask
        sta [zp_screen], y
        lda zp_print_colour
        sta [zp_colour], y
        iny
.ENDIF  ;///////////////////////////////////////////////////////////////////////

        ; print the column title ("A"-"IV")
        ;-----------------------------------------------------------------------
+       sty zp_a                ; remember screen position after column
        ldy zp_y                ; go back to start of column header

        lda zp_x                ; get column index
        jsr print_colnum        ; prints column name, clipping against edge

@end:   ldx zp_x                ; restore column index
        ldy zp_a                ; restore screen column
        rts


draw_rows:
;===============================================================================
; draw a series of rows:
;
;-------------------------------------------------------------------------------
        lda zp_view.row_lo
        sta zp_draw.row_lo
        lda zp_view.row_hi
        sta zp_draw.row_hi

        lda zp_view.rows        ; number of rows to draw (1-based)
        sta zp_c                ; set the counter to keep track
-       jsr draw_row
        inc zp_draw.row_lo      ; move to next row
        bne +                   ; did the lo-byte overflow?
        inc zp_draw.row_hi      ; if so, increment hi-byte
+       dec zp_c                ; decrement count of rows to draw
        bne -                   ; all done?

        rts


draw_row:
;===============================================================================
; draws a full sheet row, including the row number:
; this routine is used to fill in a row after scrolling vertically
;
; in:   zp_draw.row             sheet-row number to draw (16-bit)
;       zp_screen/colour        the screen address to draw at should be set
;
; out:  Y                       Y, screen-column, is reset to 0 and the drawing
;                               address is moved forward to the next screen row
;       X                       (preserved)
;       A                       (clobbered)
;-------------------------------------------------------------------------------
        stx.w @x+1              ; backup X

        ; is the selection within this row?
        ;
        asl zp_row_sel          ; remove any previous result
        clc                     ; default to "no"
        lda zp_draw.row_hi      ; compare row hi-bytes first
        eor zp_view.sel.row_hi
        bne +
        lda zp_draw.row_lo
        eor zp_view.sel.row_lo
        bne +
        ; set the flag to indicate this row is part of the selection
        ; (the row-header will be highlighted)
        sec
+       ror zp_row_sel

        ; draw row number:
        ;-----------------------------------------------------------------------
        ; we want to highlight the row number if
        ; the cursor / selection is within this row
        ;
        lda # VIC_CYAN          ; default colour
        bit zp_row_sel          ; check hi-bit of row-select flag
        bpl +
        lda # VIC_YELLOW
+       ldy # 0                 ; start on the left edge of the screen
        ldx # 3                 ; set colour for three cells
        jsr fast_colour         ; set colour first
        ldy # 0                 ; return to the left-edge of the screen
        jsr draw_row_number     ; print the row number

        ; reset the column number to where the view
        ; is currently scrolled horizontally
        ldx zp_view.col
        stx zp_draw.col
        
        ; keep drawing cells until we reach the edge of the screen:
        ;-----------------------------------------------------------------------
-       asl zp_col_sel
        clc
        lda zp_draw.col
        eor zp_view.sel.col
        bne +
        ; set the flag to indicate this column is part of the selection
        sec
+       ror zp_col_sel

        jsr draw_cell           ; draw the current cell
        cpy # SYS_SCREEN_COLS   ; have we hit the edge of the screen?
        beq +                   ; if yes, stop drawing
        inc zp_draw.col         ; move to next column number,
        bne -                   ; and draw again

        ; when the cells hit the edge of the screen, Y will already be equal
        ; to the screen width and `bump_addr` will update `zp_screen` and wrap
        ; Y back to zero. if we hit the last column ("IV") before hitting the
        ; edge of the screen, we need to clear the right-hand side of the
        ; screen to avoid grabage from the previous scroll
        ;
        ; calculate the remaining number of screen cols:
        ; we can't just subtact Y from A on the 6502, but we can simulate
        ; a subtraction through an addition that wraps around!
        ;
        tya                     ; (current screen pos)
        ; add the inverted value of the screen width
        adc # $ff-SYS_SCREEN_COLS
        eor # %11111111         ; flip the bits back to positive
        asl zp_print_mask       ; (turn off reverse-video)
        jsr fast_spaces_A       ; print spaces to the end of the screen
+       ;-----------------------------------------------------------------------
@x      ldx # $88               ; restore row number

        ; add Y to the screen address to reset
        ; Y to zero on the next screen row
        jmp bump_addr


draw_row_number:
;===============================================================================
;-------------------------------------------------------------------------------
        lda # %10000000         ; enable reverse video for row number
        sta zp_print_mask
        
        ; TODO: extend to 4-digits
        lda zp_draw.row_lo
        jmp print_number_byte

-       rts


draw_column:
;===============================================================================
; draw an entire column:
;
; draws only the content of one column, i.e. for side-scrolling
;
; in:   A       sheet-col
;-------------------------------------------------------------------------------
        sta zp_draw.col         ; set drawing column reference
        jsr col_to_screen       ; get screen x-pos for the sheet column in View
        bcs -                   ; (if not on screen, quit early)
        tay                     ; put to Y, our screen-col drawing position
        
        ; after each cell is printed we need to return to the same
        ; X-position, but move to the next screen row
        sty.w @y+1

        ; start at the first row in the view
        lda zp_view.row_lo
        sta zp_draw.row_lo
        ldx zp_view.row_hi
        stx zp_draw.row_hi
        jsr row_to_screen       ; sheet row (XA) to screen row (A)
        tax
        jsr set_scr_addr        ; set the row on screen to begin drawing

        lda zp_view.rows        ; number of rows to draw
        sta zp_c

        ; TODO: we need to set column and row-select flags;
        ;       `draw_cell` doesn't calculate these to avoid repititon
        ;
@y      ldy # $88               ; reset the screen X-position to draw the cell
        jsr draw_cell           ; draw one cell

        inc zp_draw.row_lo      ; move to the next sheet row (lo-byte)
        bne +                   ; did that overflow?
        inc zp_draw.row_hi      ; bump sheet row hi-byte
+       jsr next_scr_row        ; move screen address to the next screen row

        dec zp_c                ; one less row to draw
        bne @y                  ; keep looping?

        rts


draw_cell:
;===============================================================================
; draws the contents of the cell referenced by `zp_draw`:
;
; in:   Y       starting screen position, where `zp_screen` is screen row
;               addr, e.g. `zp_screen` = $0400, Y is sceen col. 0-39
;-------------------------------------------------------------------------------
        stx.w @x+1              ; preserve X
        ldx zp_draw.col         ; current sheet column (TODO: could be in X?)
        lda zs_cols, x          ; get column width

        sta zp_a                ; set aside column width
        sty zp_y                ; set aside current screen position
        
        ; clip against screen edge:
        ;-----------------------------------------------------------------------
        ; when printing, X will be the number of chars to print;
        ; to begin with, set this to the column width
        tax
        
        clc
        lda # SYS_SCREEN_COLS
        sbc zp_y
        cmp zp_a
        bcs +

        tax                     ; use the clipped cell-width instead
        inx

        ; erase / colour the cell:
        ;-----------------------------------------------------------------------
        ; set the cell colour/highlight:
        ; is this cell in the selection?
        ;
+       lda zp_row_sel          ; check current row-select state
        and zp_col_sel          ; combine with current column-select state
        sta zp_print_mask       ; set reverse-video based on both being true
        beq +                   ;
        lda # VIC_YELLOW
        .bit_skip2
+       lda # VIC_CYAN
        sta zp_print_colour

        jsr fast_spaces_colour  ; NOTE: does not modify carry!
        bcc ++
        
        ; print the right-border:
        ;
        ; TODO: use a solid block for the border on cursor cells,
        ;       except where multiple columns are selected
        ;
        lda zp_print_mask
        asl
        lda # $10
        bcc +
        adc # $0f
+
.IFDEF  OPTIMIZE_SIZE
        ;///////////////////////////////////////////////////////////////////////
        jsr print_char_colour
.ELSE   ;///////////////////////////////////////////////////////////////////////
        ora zp_print_mask
        sta [zp_screen], y
        lda zp_print_colour
        sta [zp_colour], y
        iny
.ENDIF  ;///////////////////////////////////////////////////////////////////////

        ; the print position is now at the end of the cell, preserve
        ; this so that further printing continues after the cell
++      sty.w @y+1

        ; print cell contents:
        ;-----------------------------------------------------------------------
        ldy zp_y                ; snap back to the beginning of the cell

        ; TODO: print the cell contents to an off-screen buffer and copy
        ;       to the screen to be able to clip properly? it'll be too
        ;       difficult to test between each character printed, 
        ;       particularly with things like centred-text
        ;
@y:     ldy # $88               ; return next screen-position
@x:     ldx # $88               ; restore X
        rts


scroll_up:
;===============================================================================
; scroll the current View up a sheet-row:
;
;-------------------------------------------------------------------------------
        ; when the View scrolls upwards a new row is revealed at the top and
        ; the bottom row drops out of the View. rather than redrawing every
        ; row we will shift the screen contents and only draw the new row
        ;
        ; we need to start with copying the 2nd-to-last row down to the
        ; last row and then walk up the screen, copying rows down by one
        ;
        clc
        lda zp_view.y           ; screen-row of the View (inc. column headers)
        adc zp_view.h           ; add the height of the View (to bottom row)
        tax
        dex
        dex
        jsr set_scr_addr
        inx
        jsr set_scr_dest

        ldx zp_view.rows        ; number of rows to copy (exclude col.headers)
        dex
        ;-----------------------------------------------------------------------
@copy:  ldy # SYS_SCREEN_COLS-1 ; copy from last screen column to first
-       lda [zp_screen     ], y ; read a byte from the upper row
        sta [zp_screen_dest], y ; write to the lower row (copy down)
        lda [zp_colour     ], y ; do the same with the colour RAM
        sta [zp_colour_dest], y
        dey
        bpl -

        ; once we reach the top, we need to redraw the topmost sheet-row
        ;  so exit before moving the screen address up a screen-row
        dex
        beq @done

        ; TODO: we should just use the screen-addr lookup table for this
        ;
        sec
        lda.b zp_screen+LO
        sbc # SYS_SCREEN_COLS
        bcs +
        dec.b zp_screen+HI
        dec.b zp_colour+HI
        sec                     ; set carry only when needed to save 2 cycles
+       sta.b zp_screen+LO
        sta.b zp_colour+LO

        lda.b zp_screen_dest+LO
        sbc # SYS_SCREEN_COLS
        bcs +
        dec.b zp_screen_dest+HI
        dec.b zp_colour_dest+HI
        sec                     ; set carry only when needed to save 2 cycles
+       sta.b zp_screen_dest+LO
        sta.b zp_colour_dest+LO

        bcs @copy               ; (always branches)

        ;-----------------------------------------------------------------------
        ; move the View's first row up a row and draw it:
        ;
@done:  ldy zp_view.row_hi      ; View first row, hi-byte
        ldx zp_view.row_lo      ; View first row, lo-byte
        bne +                   ; if the lo-byte is 0 it will underflow
        dey                     ; -> decrement View row, hi-byte
+       dex                     ; decrement View row, lo-byte
        stx zp_view.row_lo
        sty zp_view.row_hi
        stx zp_draw.row_lo      ; TODO: have `draw_row` take row from XA
        sty zp_draw.row_hi
        jmp draw_row            ; (does not use current Y)


scroll_down:
;===============================================================================
        ldx zp_view.rows        ; number of screen-rows to move
        dex                     ; less one because a new row will be drawn in

        ; we could copy 40 columns each loop but bumping the source and
        ; destination addresses forward is expensive so instead we do as many
        ; rows as will fit within an 8-bit index (i.e. 6, for 40 columns)
        ;
        lda.w copy_rows_remainder-1, x
        sta.w @rem+1
        ; given the number of rows to copy, lookup in a table the number of
        ; complete iterations required (6 rows per iteration for 40 columns)
        lda.w copy_rows_iterations-1, x
        ; if this is zero, then there is less than one full iteration
        ; of chars to copy (e.g. <6 rows for 40 columns)
        beq @rem
        ; write this count into the loop
        sta.w @ldx+1
        
        ; set the destination addresses
        ; to the 2nd row of the view
        ldx zp_view.y
        inx                     ; (skip column headers)
        inx                     ; (skip first row)
        jsr set_scr_dest
        ; now set the source address to the first row
        dex
        jsr set_scr_addr

@ldx    ldx # 1
        ;-----------------------------------------------------------------------
@copy:  ldy # 0
-       lda [zp_screen_dest], y
        sta [zp_screen     ], y
        lda [zp_colour_dest], y
        sta [zp_colour     ], y
        iny
        cpy # floor( 256 / SYS_SCREEN_COLS ) * SYS_SCREEN_COLS
        bcc -

        ; bump the source and destination addresses
        ; forward as Y has reached its limit
        jsr bump_addr_copy

        dex
        bne @copy

        ; copy remainder
        ;-----------------------------------------------------------------------
@rem:   ldx # 0
        beq @new

-       lda [zp_screen_dest], y
        sta [zp_screen     ], y
        lda [zp_colour_dest], y
        sta [zp_colour     ], y
        iny
        dex
        bne -

        jsr bump_addr_copy

        ;-----------------------------------------------------------------------
        ; calculate the last visible row number and draw it
        ; whilst at the same time moving to the next row:
        ; (without affecting said last row number!)
        ;
@new:   clc
        lda zp_view.row_lo      ; starting row, lo-byte
        adc zp_view.rows        ; add number of visible rows
        sta zp_draw.row_lo      ; set row to draw, lo-byte
        lda zp_view.row_hi      ; starting row, hi-byte
        inc zp_view.row_lo      ; (move View first row down one)
        bne +                   ; (did adding one to first row overflow?)
        inc zp_view.row_hi      ; (increment first row hi-byte)
+       adc # 0                 ; ripple the carry of the bottom row
        sta zp_draw.row_hi      ; set row to draw, hi-byte
        jmp draw_row