; ZSheet (c) copyright Kroc Camen 2022. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
.RAMSECTION "ZP_SCREEN" SLOT "ZP" RETURNORG
        ; a vector specifically for putting characters to screen
        ; -- this is always the current drawing address on screen
        zp_screen       WORD
        ; as with `zp_screen` this is the position in colour RAM.
        ; the two are kept in sync when using `bump_addr`
        zp_colour       WORD
.ENDS

.RAMSECTION "ZP_MODE"   SLOT "ZP" RETURNORG
        ; a bitmask ORed with characters before being printed;
        ; use %10000000 ($80) for reverse-video and %01000000 to force capitals
        zp_print_mask   BYTE
        ; current printing colour
        zp_print_colour BYTE
.ENDS

.RAMSECTION "ZP_DRAWRC" SLOT "ZP" RETURNORG
        ;-----------------------------------------------------------------------
        zp_drawrc       INSTANCEOF Rc
        ; during drawing of column & row headers and cells, these are flags
        ; used to indicate if the selection is within the current column/row
        zp_col_sel      BYTE
        zp_row_sel      BYTE
.ENDS


; tables for looking up the screen / colour-RAM
; addresses for each screen row:
;
.SECTION "ZS_SCREEN_ADDR" BITWINDOW 8
;###############################################################################

screen_addrs:
;===============================================================================
screen_addrs_lo:
;-------------------------------------------------------------------------------
.REPEAT SYS_SCREEN_ROWS INDEX R
        .BYTE <(zs_screen + R * SYS_SCREEN_COLS)
.ENDR
;-------------------------------------------------------------------------------
screen_addrs_hi:
;-------------------------------------------------------------------------------
.REPEAT SYS_SCREEN_ROWS INDEX R
        .BYTE >(zs_screen + R * SYS_SCREEN_COLS)
.ENDR
;-------------------------------------------------------------------------------
colour_addrs_hi:
;-------------------------------------------------------------------------------
.REPEAT SYS_SCREEN_ROWS INDEX R
        .BYTE >($d800 + R * SYS_SCREEN_COLS)
.ENDR

;###############################################################################
.ENDS


set_scr_addr:
;===============================================================================
; set the screen and colour-RAM drawing addresses,
; given a screen-row (not a sheet row!)
;
; in:   X       screen row to set drawing address for
; out:  X, Y    (preserved)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        lda.w screen_addrs_lo, x
        sta zp_screen+LO        ; the lo-bytes are shared between
        sta zp_colour+LO        ; the screen-RAM and colour-RAM
        lda.w screen_addrs_hi, x
        sta zp_screen+HI
        lda.w colour_addrs_hi, x
        sta zp_colour+HI
        
        rts

set_scr_addr_copy:
;===============================================================================
        jsr set_scr_addr        ; set the main addresses first,

        ; and then fall through to copy them
        ; ...

copy_addr:
;===============================================================================
; copies the current screen and colour RAM addresses used for a block copy:
;-------------------------------------------------------------------------------
        ldy # 2
-       lda zp_screen-1, y
        sta zp_screen_copy-1, y
        lda zp_colour-1, y
        sta zp_colour_copy-1, y
        dey
        bne -

        rts


bump_addr_copy:
;===============================================================================
; bump the main printing addresses forward and the copy addresses to match:
;
; when indexing using Y, this routine is used to bump the 16-bit source &
; destination address up according to the value in Y to avoid an 8-bit
; rollover in Y
;
; in:   Y       offset to add to `zp_screen(_copy)` & `zp_colour(_copy)`
; out:  Y       set to zero
;       X       (preserved)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        tya                     ; take current offset
        clc                     ; prepare for math!
        adc zp_screen_copy+LO   ; add Y to the address lo-byte
        bcc +                   ; if it doesn't overflow, skip the hi-byte
        inc zp_screen_copy+HI   ; increment the print address hi-byte,
        inc zp_colour_copy+HI   ; and the colour address likewise
+       sta zp_screen_copy+LO   ; update the address lo-byte --
        sta zp_colour_copy+LO   ; these are the same between print & colour

        ; fall through to bump the main addresses and reset Y
        ;

bump_addr:
;===============================================================================
; add Y to `zp_screen` & `zp_colour`
;
; when indexing using Y, this routine is used to bump the 16-bit address
; up according to the value in Y to avoid an 8-bit rollover in Y
;
; in:   Y       offset to add to `zp_screen` & `zp_colour`
; out:  Y       set to zero
;       X       (preserved)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        tya                     ; take current offset
        clc                     ; prepare for math!
        adc zp_screen+LO        ; add Y to the address lo-byte
        bcc +                   ; no overflow? skip hi-bytes
        inc zp_screen+HI        ; increment the print address hi-byte,
        inc zp_colour+HI        ; and the colour address likewise
+       sta zp_screen+LO        ; update the address lo-byte --
        sta zp_colour+LO        ; shared between print & colour
        
        ; Y is set back to zero so that `lda [zp_screen], y`
        ; reflects the same address as before!
        ldy # 0
        
        rts


highlight_chars:
;===============================================================================
; convert some characters on screen into reverse-video
; (e.g. for cell cursor)
;
; in:   Y       starting offset from screen row, i.e. x-pos on screen
;       X       number of character cells to reverse (1-based)
;-------------------------------------------------------------------------------
-       lda [zp_screen], y
        ora # %10000000
        sta [zp_screen], y
        lda # VIC_YELLOW
        sta [zp_colour], y
        iny
        dex
        bne -
        rts


unlight_chars:
;===============================================================================
; remove highlight from characters:
;
; in:   Y       starting offset from screen row, i.e. x-pos on screen
;       X       number of character cells to un-reverse (1-based)
;-------------------------------------------------------------------------------
-       lda [zp_screen], y
        and %01111111
        sta [zp_screen], y
        lda # VIC_CYAN
        sta [zp_colour], y
        iny
        dex
        bne -
        rts


draw_screen:
;===============================================================================
; does a complete screen draw
;
;-------------------------------------------------------------------------------
        jsr draw_tabs
        jsr draw_status_bar
        jsr draw_formula_bar
        jmp draw_view           ; do a complete redraw of the view


draw_tabs:
;===============================================================================
; do a complete draw of the table tabs:
;-------------------------------------------------------------------------------
        ldx # 0
        jsr set_scr_addr

        clc                     ; clear reverse-video,
        asl zp_print_mask       ; if set

        ldy # 0
        ldx # SYS_SCREEN_COLS
        lda # VIC_CYAN
        jmp fast_spaces_colour


draw_status_bar:
;===============================================================================
; do a complete draw of the status bar:
;-------------------------------------------------------------------------------
        ldx # SYS_SCREEN_ROWS-2 ; move to the 2nd to last screen row,
        jsr set_scr_addr        ; where the status bar is
        
        ; set reverse-video drawing
        lda # %10000000
        sta zp_print_mask

        ; print spaces:
        ldy # 0                 ; starting at the left,
        ldx # SYS_SCREEN_COLS   ; across the whole screen,
        lda # VIC_CYAN          ; with this colour
        jmp fast_spaces_colour


draw_formula_bar:
;===============================================================================
; do a complete draw of the table tabs:
;-------------------------------------------------------------------------------
        ldx # 0
        jsr set_scr_addr

        clc                     ; clear reverse-video,
        asl zp_print_mask       ; if set

        ldy # 0
        ldx # SYS_SCREEN_COLS
        lda # VIC_CYAN
        jmp fast_spaces_colour


draw_view:
;===============================================================================
; does a complete draw of the spreadsheet view:
;
;-------------------------------------------------------------------------------
        jsr draw_col_headers
        jmp draw_rows


draw_col_headers:
;===============================================================================
; draws the column headers (for the current view) across the screen:
;
;-------------------------------------------------------------------------------
        ldx zp_view.y           ; set the screen address to the top of
        jsr set_scr_addr        ; the view, where the column-headers reside

        ; left-hand offset:
        ;
        ; fill in the corner bit of the sheet:
        ;
        sec                     ; enable reverse-video printing
        ror zp_print_mask
        ldy # 0                 ; start screen col...
        ldx # 3                 ; width...
        lda # VIC_CYAN          ; colour...
        jsr fast_spaces_colour  ; print!

        ; first column to begin drawing
        ldx zp_view.col
        stx zp_drawrc.col

        ; keep drawing columns until we reach the edge
        ; of the screen, or we reach column 255 ("IV")!
        ;
-       lda # 2                 ; TODO: column width
        jsr draw_col_header     ; draw the column header
        cpy # SYS_SCREEN_COLS   ; have we hit the edge of the screen?
        beq +                   ; if so -- stop drawing column headers
        inx                     ; move to next column number,
        bne -                   ; and draw again

        ; when the column headers hit the edge of the screen, Y will already
        ; be equal to the screen width and `bump_addr` will update `zp_screen`
        ; and wrap Y back to zero. if we hit the last column ("IV") before
        ; hitting the edge of the screen, we need to clear the right-hand
        ; side of the screen to avoid grabage from the previous scroll
        ;
        ; calculate the remaining number of screen cols:
        ; we can't just subtact Y from A on the 6502, but we can simulate
        ; a subtraction through an addition that wraps around!
        ;
        tya                     ; (current screen pos)
        ; add the inverted value of the screen width
        adc # $ff-SYS_SCREEN_COLS
        eor # %11111111         ; flip the bits back to positive
        tax
        asl zp_print_mask       ; turn off reverse-video
        jsr fast_spaces         ; print spaces to the end of the screen

        ; add Y to the screen address to reset
        ; Y to zero on the next screen row
+       jmp bump_addr


draw_col_header:
;===============================================================================
; draw a column header:
;
; drawing will stop if the column hits the edge of the screen
;
; in:   A       column width. the right border is added automatically
;       X       column number (0-255), which will be converted to alpha
;       Y       starting screen position, where `zp_screen` is screen row
;               addr, e.g. `zp_screen` = $0400, Y is sceen col. 0-39
;
; out:  X       the column number is not incremented for the benefit
;               of printing a column of the sheet vertically
;       Y       the screen position is moved forward over the column
;       A       (clobbered)
;===============================================================================
        sta zp_a                ; set aside column width
        stx zp_x                ; set aside column index
        sty zp_y                ; set aside current screen position

        ; we want to highlight the column if the cursor /
        ; selection is within this column
        lda # VIC_CYAN
        cpx zp_view.cursor.col
        bne +
        lda # VIC_YELLOW
+       sta zp_print_colour

        ; when printing, X will be the number of chars to print;
        ; to begin with, set this to the column width
        ldx zp_a
        
        ; enable reverse video printing
        lda # %10000000
        sta zp_print_mask

        clc
        lda # SYS_SCREEN_COLS
        sbc zp_y
        cmp zp_a
        bcs +

        ; use the clipped column-width instead
        tax
        inx

        ; draw header background:
+       lda zp_print_colour
        ; note that X already contains column width to draw
        jsr fast_spaces_colour  ; NOTE: does not modify carry!
        bcc +
        
        ; print the right-border:
        lda # $91
.IFDEF  OPTIMIZE_SIZE
        jsr print_char_colour
.ELSE
        ;;ora zp_print_mask
        sta [zp_screen], y
        lda zp_print_colour
        sta [zp_colour], y
        iny
.ENDIF

        ; print the column title ("A"-"IV")
        ;-----------------------------------------------------------------------
+       sty zp_a                ; remember screen position after column
        ldy zp_y                ; go back to start of column header

        ldx zp_x                ; get column index
        jsr col_index_to_alpha_x; convert to letter(s)
        cpx # $40               ; is there an upper-letter?
        beq +                   ; if not, skip over printing upper-letter

        pha                     ; put aside lower-letter
        txa                     ; get upper-letter
        ora # %10000000         ; set reverse video
        sta [zp_screen], y      ; print upper-letter
        iny                     ; move to next character on screen
        pla                     ; retrieve lower-letter

        cpy # SYS_SCREEN_COLS
        beq @end

+       ora # %10000000         ; set reverse video
        sta [zp_screen], y      ; print lower-letter

@end:   ldx zp_x                ; restore column index
        ldy zp_a                ; restore screen column
        rts


draw_rows:
;===============================================================================
; draw a series of rows:
;
;-------------------------------------------------------------------------------
        ldx zp_view.h           ; number of rows to draw (1-based)
        lda zp_view.row         ; start from the row defined in `zp_drawrc`
        sta zp_drawrc.row

-       jsr draw_row
        inc zp_drawrc.row       ; move to next row
        dex
        bne -

        rts


draw_row:
;===============================================================================
; draws a full sheet row, including the row number:
; this routine is used to fill in a row after scrolling vertically
;
; out:  Y       Y, screen-column, is reset to 0 and `zp_screen` /
;               `zp_colour` are moved forward to the next screen row
;       X       (preserved)
;       A       (clobbered)
;-------------------------------------------------------------------------------
        stx zp_x                ; backup X

        ; is the selection within this row?
        asl zp_row_sel
        clc
        lda zp_drawrc.row
        eor zp_view.cursor.row
        bne +
        ; set the flag to indicate this row is part of the selection
        ; (the row-header will be highlighted)
        sec
+       ror zp_row_sel

        ; draw row number:
        ;-----------------------------------------------------------------------
        ; we want to highlight the row number if
        ; the cursor / selection is within this row
        ;
        lda # VIC_CYAN          ; default colour
        bit zp_row_sel          ; check hi-bit of row-select flag
        bpl +
        lda # VIC_YELLOW
+       ldy # 0                 ; start on the left edge of the screen
        ldx # 3                 ; set colour for three cells
        jsr fast_colour         ; set colour first
        ldy # 0                 ; return to the left-edge of the screen
        jsr draw_row_number     ; print the row number

        ; reset the column number to where the view
        ; is currently scrolled horizontally
        lda zp_view.col
        sta zp_drawrc.col
        
        ; keep drawing cells until we reach the edge of the screen:
        ;-----------------------------------------------------------------------
-       asl zp_col_sel
        clc
        lda zp_drawrc.col
        eor zp_view.cursor.col
        bne +
        ; set the flag to indicate this column is part of the selection
        sec
+       ror zp_col_sel

        jsr draw_cell           ; draw the current cell
        cpy # SYS_SCREEN_COLS   ; have we hit the edge of the screen?
        beq +                   ; if yes, stop drawing
        inc zp_drawrc.col       ; move to next column number,
        bne -                   ; and draw again

        ; when the cells hit the edge of the screen, Y will already be equal
        ; to the screen width and `bump_addr` will update `zp_screen` and wrap
        ; Y back to zero. if we hit the last column ("IV") before hitting the
        ; edge of the screen, we need to clear the right-hand side of the
        ; screen to avoid grabage from the previous scroll
        ;
        ; calculate the remaining number of screen cols:
        ; we can't just subtact Y from A on the 6502, but we can simulate
        ; a subtraction through an addition that wraps around!
        ;
        tya                     ; (current screen pos)
        ; add the inverted value of the screen width
        adc # $ff-SYS_SCREEN_COLS
        eor # %11111111         ; flip the bits back to positive
        tax
        asl zp_print_mask       ; turn off reverse-video
        jsr fast_spaces         ; print spaces to the end of the screen

+       ldx zp_x                ; restore row number

        ; add Y to the screen address to reset
        ; Y to zero on the next screen row
        jmp bump_addr


draw_row_number:
;===============================================================================
        lda # %10000000         ; enable reverse video for row number
        sta zp_print_mask
        
        lda zp_drawrc.row+LO
        jmp print_number_byte


draw_column:
;===============================================================================
; draw an entire column:
;
; draws only the content of one column, i.e. for side-scrolling
;-------------------------------------------------------------------------------
        rts


draw_cell:
;===============================================================================
; draws the contents of the cell referenced by `zp_drawrc`:
;
; in:   Y       starting screen position, where `zp_screen` is screen row
;               addr, e.g. `zp_screen` = $0400, Y is sceen col. 0-39
;-------------------------------------------------------------------------------
        lda # 2                 ; TODO: cell width (fixed for now)
        sta zp_a                ; set aside column width
        sty zp_y                ; set aside current screen position
        
        ; clip against screen edge:
        ;-----------------------------------------------------------------------
        ; when printing, X will be the number of chars to print;
        ; to begin with, set this to the column width
        tax
        
        clc
        lda # SYS_SCREEN_COLS
        sbc zp_y
        cmp zp_a
        bcs +

        tax                     ; use the clipped cell-width instead
        inx

        ; erase / colour the cell:
        ;-----------------------------------------------------------------------
        ; set the cell colour/highlight:
        ; is this cell in the selection?
        ;
+       lda zp_row_sel          ; check current row-select state
        and zp_col_sel          ; combine with current column-select state
        sta zp_print_mask       ; set reverse-video based on both being true
        beq +                   ;
        lda # VIC_YELLOW
        .bit_skip2
+       lda # VIC_CYAN
        sta zp_print_colour

        jsr fast_spaces_colour  ; NOTE: does not modify carry!
        bcc ++
        
        ; print the right-border:
        ;
        ; TODO: use a solid block for the border on cursor cells,
        ;       except where multiple columns are selected
        ;
        lda zp_print_mask
        asl
        lda # $10
        bcc +
        adc # $0f
+
.IFDEF  OPTIMIZE_SIZE
        jsr print_char_colour
.ELSE
        ora zp_print_mask
        sta [zp_screen], y
        lda zp_print_colour
        sta [zp_colour], y
        iny
.ENDIF

        ; the print position is now at the end of the cell, preserve
        ; this so that further printing continues after the cell
++      sty.w @ldy+1

        ; print cell contents:
        ;-----------------------------------------------------------------------
        ldy zp_y                ; snap back to the beginning of the cell

        ; TODO: print the cell contents to an off-screen buffer and copy
        ;       to the screen to be able to clip properly. it'll be too
        ;       difficult to test between each character printer, 
        ;       particularly with things like centred-text
        ;
@ldy:   ldy # $88               ; return next screen-position
        rts